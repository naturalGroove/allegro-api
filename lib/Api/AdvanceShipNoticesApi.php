<?php
/**
 * AdvanceShipNoticesApi
 * PHP version 7.2
 *
 * @category Class
 * @package  AllegroApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Allegro REST API
 *
 * https://developer.allegro.pl/about  Documentation is generated from [this](https://developer.allegro.pl/swagger.yaml) OpenAPI 3.0 specification file.
 *
 * The version of the OpenAPI document: latest
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace AllegroApi\Api;

use AllegroApi\Configuration;
use AllegroApi\DebugPlugin;
use AllegroApi\Exception\ApiException;
use AllegroApi\HeaderSelector;
use AllegroApi\ObjectSerializer;
use GuzzleHttp\Psr7\MultipartStream;
use Http\Client\Common\Plugin\ErrorPlugin;
use Http\Client\Common\Plugin\RedirectPlugin;
use Http\Client\Common\PluginClient;
use Http\Client\Common\PluginClientFactory;
use Http\Client\Exception\HttpException;
use Http\Client\HttpAsyncClient;
use Http\Discovery\HttpAsyncClientDiscovery;
use Http\Discovery\Psr17FactoryDiscovery;
use Http\Discovery\Psr18ClientDiscovery;
use Http\Message\RequestFactory;
use Http\Promise\Promise;
use Psr\Http\Client\ClientExceptionInterface;
use Psr\Http\Client\ClientInterface;
use Psr\Http\Message\RequestFactoryInterface;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\StreamFactoryInterface;
use Psr\Http\Message\UriFactoryInterface;
use Psr\Http\Message\UriInterface;

use function sprintf;

/**
 * AdvanceShipNoticesApi Class Doc Comment
 *
 * @category Class
 * @package  AllegroApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class AdvanceShipNoticesApi
{
    /**
     * @var PluginClient
     */
    protected $httpClient;

    /**
     * @var PluginClient
     */
    protected $httpAsyncClient;

    /**
     * @var UriFactoryInterface
     */
    protected $uriFactory;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @var RequestFactoryInterface
     */
    protected $requestFactory;

    /**
     * @var StreamFactoryInterface
     */
    protected $streamFactory;

    public function __construct(
        ClientInterface $httpClient = null,
        Configuration $config = null,
        HttpAsyncClient $httpAsyncClient = null,
        UriFactoryInterface $uriFactory = null,
        RequestFactoryInterface $requestFactory = null,
        StreamFactoryInterface $streamFactory = null,
        HeaderSelector $selector = null,
        ?array $plugins = null,
        $hostIndex = 0
    ) {
        $this->config = $config ?? (new Configuration())->setHost('https://api.allegro.pl');
        $this->requestFactory = $requestFactory ?? Psr17FactoryDiscovery::findRequestFactory();
        $this->streamFactory = $streamFactory ?? Psr17FactoryDiscovery::findStreamFactory();

        $plugins = $plugins ?? [
            new RedirectPlugin(['strict' => true]),
            new ErrorPlugin(),
        ];

        if ($this->config->getDebug()) {
            $plugins[] = new DebugPlugin(fopen($this->config->getDebugFile(), 'ab'));
        }

        $this->httpClient = (new PluginClientFactory())->createClient(
            $httpClient ?? Psr18ClientDiscovery::find(),
            $plugins
        );

        $this->httpAsyncClient = (new PluginClientFactory())->createClient(
            $httpAsyncClient ?? HttpAsyncClientDiscovery::find(),
            $plugins
        );

        $this->uriFactory = $uriFactory ?? Psr17FactoryDiscovery::findUriFactory();

        $this->headerSelector = $selector ?? new HeaderSelector();

        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createAdvanceShipNotice
     *
     * Create an Advance Ship Notice
     *
     * @param  \AllegroApi\Model\CreateAdvanceShipNoticeRequest $create_advance_ship_notice_request create_advance_ship_notice_request (required)
     *
     *@throws \InvalidArgumentException
     * @throws \AllegroApi\Exception\ApiException on non-2xx response
     * @return \AllegroApi\Model\CreateAdvanceShipNoticeResponse|\AllegroApi\Model\ErrorsHolder|\AllegroApi\Model\ErrorsHolder
     */
    public function createAdvanceShipNotice($create_advance_ship_notice_request)
    {
        [$response] = $this->createAdvanceShipNoticeWithHttpInfo($create_advance_ship_notice_request);
        return $response;
    }

    /**
     * Operation createAdvanceShipNoticeWithHttpInfo
     *
     * Create an Advance Ship Notice
     *
     * @param  \AllegroApi\Model\CreateAdvanceShipNoticeRequest $create_advance_ship_notice_request (required)
     *
     *@throws \InvalidArgumentException
     * @throws \AllegroApi\Exception\ApiException on non-2xx response
     * @return array of \AllegroApi\Model\CreateAdvanceShipNoticeResponse|\AllegroApi\Model\ErrorsHolder|\AllegroApi\Model\ErrorsHolder, HTTP status code, HTTP response headers (array of strings)
     */
    public function createAdvanceShipNoticeWithHttpInfo($create_advance_ship_notice_request)
    {
        $request = $this->createAdvanceShipNoticeRequest($create_advance_ship_notice_request);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 201:
                    if ('\AllegroApi\Model\CreateAdvanceShipNoticeResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AllegroApi\Model\CreateAdvanceShipNoticeResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\AllegroApi\Model\ErrorsHolder' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AllegroApi\Model\ErrorsHolder', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\AllegroApi\Model\ErrorsHolder' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AllegroApi\Model\ErrorsHolder', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\AllegroApi\Model\CreateAdvanceShipNoticeResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AllegroApi\Model\CreateAdvanceShipNoticeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AllegroApi\Model\ErrorsHolder',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AllegroApi\Model\ErrorsHolder',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createAdvanceShipNoticeAsync
     *
     * Create an Advance Ship Notice
     *
     * @param  \AllegroApi\Model\CreateAdvanceShipNoticeRequest $create_advance_ship_notice_request (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function createAdvanceShipNoticeAsync($create_advance_ship_notice_request)
    {
        return $this->createAdvanceShipNoticeAsyncWithHttpInfo($create_advance_ship_notice_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createAdvanceShipNoticeAsyncWithHttpInfo
     *
     * Create an Advance Ship Notice
     *
     * @param  \AllegroApi\Model\CreateAdvanceShipNoticeRequest $create_advance_ship_notice_request (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function createAdvanceShipNoticeAsyncWithHttpInfo($create_advance_ship_notice_request)
    {
        $returnType = '\AllegroApi\Model\CreateAdvanceShipNoticeResponse';
        $request = $this->createAdvanceShipNoticeRequest($create_advance_ship_notice_request);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'createAdvanceShipNotice'
     *
     * @param  \AllegroApi\Model\CreateAdvanceShipNoticeRequest $create_advance_ship_notice_request (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function createAdvanceShipNoticeRequest($create_advance_ship_notice_request)
    {
        // verify the required parameter 'create_advance_ship_notice_request' is set
        if ($create_advance_ship_notice_request === null || (is_array($create_advance_ship_notice_request) && count($create_advance_ship_notice_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_advance_ship_notice_request when calling createAdvanceShipNotice'
            );
        }

        $resourcePath = '/fulfillment/advance-ship-notices';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.allegro.public.v1+json', 'application/json'],
            'application/vnd.allegro.public.v1+json',
            $multipart
        );

        // for model (json/xml)
        if (isset($create_advance_ship_notice_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($create_advance_ship_notice_request));
            } else {
                $httpBody = $create_advance_ship_notice_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('POST', $uri, $headers, $httpBody);
    }

    /**
     * Operation createLabelsCommand
     *
     * Create labels
     *
     * @param  string $command_id The identifier of the command. (required)
     * @param  \AllegroApi\Model\CreateLabelsCommandOnlyInput $create_labels_command_only_input create_labels_command_only_input (required)
     *
     *@throws \InvalidArgumentException
     * @throws \AllegroApi\Exception\ApiException on non-2xx response
     * @return \AllegroApi\Model\CreateLabelsCommand|\AllegroApi\Model\ErrorsHolder
     */
    public function createLabelsCommand($command_id, $create_labels_command_only_input)
    {
        [$response] = $this->createLabelsCommandWithHttpInfo($command_id, $create_labels_command_only_input);
        return $response;
    }

    /**
     * Operation createLabelsCommandWithHttpInfo
     *
     * Create labels
     *
     * @param  string $command_id The identifier of the command. (required)
     * @param  \AllegroApi\Model\CreateLabelsCommandOnlyInput $create_labels_command_only_input (required)
     *
     *@throws \InvalidArgumentException
     * @throws \AllegroApi\Exception\ApiException on non-2xx response
     * @return array of \AllegroApi\Model\CreateLabelsCommand|\AllegroApi\Model\ErrorsHolder, HTTP status code, HTTP response headers (array of strings)
     */
    public function createLabelsCommandWithHttpInfo($command_id, $create_labels_command_only_input)
    {
        $request = $this->createLabelsCommandRequest($command_id, $create_labels_command_only_input);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 201:
                    if ('\AllegroApi\Model\CreateLabelsCommand' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AllegroApi\Model\CreateLabelsCommand', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\AllegroApi\Model\ErrorsHolder' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AllegroApi\Model\ErrorsHolder', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\AllegroApi\Model\CreateLabelsCommand';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AllegroApi\Model\CreateLabelsCommand',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AllegroApi\Model\ErrorsHolder',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createLabelsCommandAsync
     *
     * Create labels
     *
     * @param  string $command_id The identifier of the command. (required)
     * @param  \AllegroApi\Model\CreateLabelsCommandOnlyInput $create_labels_command_only_input (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function createLabelsCommandAsync($command_id, $create_labels_command_only_input)
    {
        return $this->createLabelsCommandAsyncWithHttpInfo($command_id, $create_labels_command_only_input)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createLabelsCommandAsyncWithHttpInfo
     *
     * Create labels
     *
     * @param  string $command_id The identifier of the command. (required)
     * @param  \AllegroApi\Model\CreateLabelsCommandOnlyInput $create_labels_command_only_input (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function createLabelsCommandAsyncWithHttpInfo($command_id, $create_labels_command_only_input)
    {
        $returnType = '\AllegroApi\Model\CreateLabelsCommand';
        $request = $this->createLabelsCommandRequest($command_id, $create_labels_command_only_input);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'createLabelsCommand'
     *
     * @param  string $command_id The identifier of the command. (required)
     * @param  \AllegroApi\Model\CreateLabelsCommandOnlyInput $create_labels_command_only_input (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function createLabelsCommandRequest($command_id, $create_labels_command_only_input)
    {
        // verify the required parameter 'command_id' is set
        if ($command_id === null || (is_array($command_id) && count($command_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $command_id when calling createLabelsCommand'
            );
        }
        // verify the required parameter 'create_labels_command_only_input' is set
        if ($create_labels_command_only_input === null || (is_array($create_labels_command_only_input) && count($create_labels_command_only_input) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_labels_command_only_input when calling createLabelsCommand'
            );
        }

        $resourcePath = '/fulfillment/create-labels-commands/{command-id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // path params
        if ($command_id !== null) {
            $resourcePath = str_replace(
                '{' . 'command-id' . '}',
                ObjectSerializer::toPathValue($command_id),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.allegro.public.v1+json', 'application/json'],
            'application/vnd.allegro.public.v1+json',
            $multipart
        );

        // for model (json/xml)
        if (isset($create_labels_command_only_input)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($create_labels_command_only_input));
            } else {
                $httpBody = $create_labels_command_only_input;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('PUT', $uri, $headers, $httpBody);
    }

    /**
     * Operation deleteAdvanceShipNotice
     *
     * Delete Advance Ship Notice
     *
     * @param  string $id An identifier of the Advance Ship Notice to delete. (required)
     *
     *@throws \InvalidArgumentException
     * @throws \AllegroApi\Exception\ApiException on non-2xx response
     * @return void
     */
    public function deleteAdvanceShipNotice($id)
    {
        $this->deleteAdvanceShipNoticeWithHttpInfo($id);
    }

    /**
     * Operation deleteAdvanceShipNoticeWithHttpInfo
     *
     * Delete Advance Ship Notice
     *
     * @param  string $id An identifier of the Advance Ship Notice to delete. (required)
     *
     *@throws \InvalidArgumentException
     * @throws \AllegroApi\Exception\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAdvanceShipNoticeWithHttpInfo($id)
    {
        $request = $this->deleteAdvanceShipNoticeRequest($id);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteAdvanceShipNoticeAsync
     *
     * Delete Advance Ship Notice
     *
     * @param  string $id An identifier of the Advance Ship Notice to delete. (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function deleteAdvanceShipNoticeAsync($id)
    {
        return $this->deleteAdvanceShipNoticeAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteAdvanceShipNoticeAsyncWithHttpInfo
     *
     * Delete Advance Ship Notice
     *
     * @param  string $id An identifier of the Advance Ship Notice to delete. (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function deleteAdvanceShipNoticeAsyncWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->deleteAdvanceShipNoticeRequest($id);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteAdvanceShipNotice'
     *
     * @param  string $id An identifier of the Advance Ship Notice to delete. (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function deleteAdvanceShipNoticeRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteAdvanceShipNotice'
            );
        }

        $resourcePath = '/fulfillment/advance-ship-notices/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            [],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('DELETE', $uri, $headers, $httpBody);
    }

    /**
     * Operation getAdvanceShipNotice
     *
     * Get single Advance Ship Notice
     *
     * @param  string $id The identifier of returned Advance Ship Notice. (required)
     *
     *@throws \InvalidArgumentException
     * @throws \AllegroApi\Exception\ApiException on non-2xx response
     * @return \AllegroApi\Model\AdvanceShipNoticeResponse
     */
    public function getAdvanceShipNotice($id)
    {
        [$response] = $this->getAdvanceShipNoticeWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getAdvanceShipNoticeWithHttpInfo
     *
     * Get single Advance Ship Notice
     *
     * @param  string $id The identifier of returned Advance Ship Notice. (required)
     *
     *@throws \InvalidArgumentException
     * @throws \AllegroApi\Exception\ApiException on non-2xx response
     * @return array of \AllegroApi\Model\AdvanceShipNoticeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAdvanceShipNoticeWithHttpInfo($id)
    {
        $request = $this->getAdvanceShipNoticeRequest($id);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\AllegroApi\Model\AdvanceShipNoticeResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AllegroApi\Model\AdvanceShipNoticeResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\AllegroApi\Model\AdvanceShipNoticeResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AllegroApi\Model\AdvanceShipNoticeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAdvanceShipNoticeAsync
     *
     * Get single Advance Ship Notice
     *
     * @param  string $id The identifier of returned Advance Ship Notice. (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function getAdvanceShipNoticeAsync($id)
    {
        return $this->getAdvanceShipNoticeAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAdvanceShipNoticeAsyncWithHttpInfo
     *
     * Get single Advance Ship Notice
     *
     * @param  string $id The identifier of returned Advance Ship Notice. (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function getAdvanceShipNoticeAsyncWithHttpInfo($id)
    {
        $returnType = '\AllegroApi\Model\AdvanceShipNoticeResponse';
        $request = $this->getAdvanceShipNoticeRequest($id);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAdvanceShipNotice'
     *
     * @param  string $id The identifier of returned Advance Ship Notice. (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function getAdvanceShipNoticeRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getAdvanceShipNotice'
            );
        }

        $resourcePath = '/fulfillment/advance-ship-notices/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.allegro.public.v1+json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('GET', $uri, $headers, $httpBody);
    }

    /**
     * Operation getAdvanceShipNoticeLabels
     *
     * Get labels for Advance Ship Notice
     *
     * @param  string $id An identifier of the Advance Ship Notice. (required)
     * @param  string $accept Content-type of generated labels. (required)
     *
     * @throws \InvalidArgumentException
     * @throws \AllegroApi\Exception\ApiException on non-2xx response
     * @return \SplFileObject
     */
    public function getAdvanceShipNoticeLabels($id, $accept)
    {
        [$response] = $this->getAdvanceShipNoticeLabelsWithHttpInfo($id, $accept);
        return $response;
    }

    /**
     * Operation getAdvanceShipNoticeLabelsWithHttpInfo
     *
     * Get labels for Advance Ship Notice
     *
     * @param  string $id An identifier of the Advance Ship Notice. (required)
     * @param  string $accept Content-type of generated labels. (required)
     *
     *@throws \InvalidArgumentException
     * @throws \AllegroApi\Exception\ApiException on non-2xx response
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAdvanceShipNoticeLabelsWithHttpInfo($id, $accept)
    {
        $request = $this->getAdvanceShipNoticeLabelsRequest($id, $accept);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\SplFileObject' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SplFileObject', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SplFileObject';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAdvanceShipNoticeLabelsAsync
     *
     * Get labels for Advance Ship Notice
     *
     * @param  string $id An identifier of the Advance Ship Notice. (required)
     * @param  string $accept Content-type of generated labels. (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function getAdvanceShipNoticeLabelsAsync($id, $accept)
    {
        return $this->getAdvanceShipNoticeLabelsAsyncWithHttpInfo($id, $accept)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAdvanceShipNoticeLabelsAsyncWithHttpInfo
     *
     * Get labels for Advance Ship Notice
     *
     * @param  string $id An identifier of the Advance Ship Notice. (required)
     * @param  string $accept Content-type of generated labels. (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function getAdvanceShipNoticeLabelsAsyncWithHttpInfo($id, $accept)
    {
        $returnType = '\SplFileObject';
        $request = $this->getAdvanceShipNoticeLabelsRequest($id, $accept);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAdvanceShipNoticeLabels'
     *
     * @param  string $id An identifier of the Advance Ship Notice. (required)
     * @param  string $accept Content-type of generated labels. (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function getAdvanceShipNoticeLabelsRequest($id, $accept)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getAdvanceShipNoticeLabels'
            );
        }
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling getAdvanceShipNoticeLabels'
            );
        }

        $resourcePath = '/fulfillment/advance-ship-notices/{id}/labels';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['accept'] = ObjectSerializer::toHeaderValue($accept);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/pdf', 'x-application/zpl'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('GET', $uri, $headers, $httpBody);
    }

    /**
     * Operation getAdvanceShipNoticeReceivingState
     *
     * Check current state and details of Advance Ship Notice receiving
     *
     * @param  string $id An identifier of advance ship notice. (required)
     *
     * @throws \InvalidArgumentException
     * @throws \AllegroApi\Exception\ApiException on non-2xx response
     * @return \AllegroApi\Model\ReceivingState
     */
    public function getAdvanceShipNoticeReceivingState($id)
    {
        [$response] = $this->getAdvanceShipNoticeReceivingStateWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getAdvanceShipNoticeReceivingStateWithHttpInfo
     *
     * Check current state and details of Advance Ship Notice receiving
     *
     * @param  string $id An identifier of advance ship notice. (required)
     *
     *@throws \InvalidArgumentException
     * @throws \AllegroApi\Exception\ApiException on non-2xx response
     * @return array of \AllegroApi\Model\ReceivingState, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAdvanceShipNoticeReceivingStateWithHttpInfo($id)
    {
        $request = $this->getAdvanceShipNoticeReceivingStateRequest($id);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\AllegroApi\Model\ReceivingState' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AllegroApi\Model\ReceivingState', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\AllegroApi\Model\ReceivingState';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AllegroApi\Model\ReceivingState',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAdvanceShipNoticeReceivingStateAsync
     *
     * Check current state and details of Advance Ship Notice receiving
     *
     * @param  string $id An identifier of advance ship notice. (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function getAdvanceShipNoticeReceivingStateAsync($id)
    {
        return $this->getAdvanceShipNoticeReceivingStateAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAdvanceShipNoticeReceivingStateAsyncWithHttpInfo
     *
     * Check current state and details of Advance Ship Notice receiving
     *
     * @param  string $id An identifier of advance ship notice. (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function getAdvanceShipNoticeReceivingStateAsyncWithHttpInfo($id)
    {
        $returnType = '\AllegroApi\Model\ReceivingState';
        $request = $this->getAdvanceShipNoticeReceivingStateRequest($id);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAdvanceShipNoticeReceivingState'
     *
     * @param  string $id An identifier of advance ship notice. (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function getAdvanceShipNoticeReceivingStateRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getAdvanceShipNoticeReceivingState'
            );
        }

        $resourcePath = '/fulfillment/advance-ship-notices/{id}/receiving-state';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.allegro.public.v1+json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('GET', $uri, $headers, $httpBody);
    }

    /**
     * Operation getAdvanceShipNotices
     *
     * Get list of Advance Ship Notices
     *
     * @param  int $offset The offset of elements in the response. (optional, default to 0)
     * @param  int $limit Maximum number of elements in response. (optional, default to 50)
     * @param  \AllegroApi\Model\AdvanceShipNoticeStatus[] $status A status of the Advance Ship Notices in the response. (optional)
     *
     *@throws \InvalidArgumentException
     * @throws \AllegroApi\Exception\ApiException on non-2xx response
     * @return \AllegroApi\Model\AdvanceShipNoticeList|\AllegroApi\Model\ErrorsHolder
     */
    public function getAdvanceShipNotices($offset = 0, $limit = 50, $status = null)
    {
        [$response] = $this->getAdvanceShipNoticesWithHttpInfo($offset, $limit, $status);
        return $response;
    }

    /**
     * Operation getAdvanceShipNoticesWithHttpInfo
     *
     * Get list of Advance Ship Notices
     *
     * @param  int $offset The offset of elements in the response. (optional, default to 0)
     * @param  int $limit Maximum number of elements in response. (optional, default to 50)
     * @param  \AllegroApi\Model\AdvanceShipNoticeStatus[] $status A status of the Advance Ship Notices in the response. (optional)
     *
     *@throws \InvalidArgumentException
     * @throws \AllegroApi\Exception\ApiException on non-2xx response
     * @return array of \AllegroApi\Model\AdvanceShipNoticeList|\AllegroApi\Model\ErrorsHolder, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAdvanceShipNoticesWithHttpInfo($offset = 0, $limit = 50, $status = null)
    {
        $request = $this->getAdvanceShipNoticesRequest($offset, $limit, $status);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\AllegroApi\Model\AdvanceShipNoticeList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AllegroApi\Model\AdvanceShipNoticeList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\AllegroApi\Model\ErrorsHolder' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AllegroApi\Model\ErrorsHolder', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\AllegroApi\Model\AdvanceShipNoticeList';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AllegroApi\Model\AdvanceShipNoticeList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AllegroApi\Model\ErrorsHolder',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAdvanceShipNoticesAsync
     *
     * Get list of Advance Ship Notices
     *
     * @param  int $offset The offset of elements in the response. (optional, default to 0)
     * @param  int $limit Maximum number of elements in response. (optional, default to 50)
     * @param  \AllegroApi\Model\AdvanceShipNoticeStatus[] $status A status of the Advance Ship Notices in the response. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function getAdvanceShipNoticesAsync($offset = 0, $limit = 50, $status = null)
    {
        return $this->getAdvanceShipNoticesAsyncWithHttpInfo($offset, $limit, $status)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAdvanceShipNoticesAsyncWithHttpInfo
     *
     * Get list of Advance Ship Notices
     *
     * @param  int $offset The offset of elements in the response. (optional, default to 0)
     * @param  int $limit Maximum number of elements in response. (optional, default to 50)
     * @param  \AllegroApi\Model\AdvanceShipNoticeStatus[] $status A status of the Advance Ship Notices in the response. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function getAdvanceShipNoticesAsyncWithHttpInfo($offset = 0, $limit = 50, $status = null)
    {
        $returnType = '\AllegroApi\Model\AdvanceShipNoticeList';
        $request = $this->getAdvanceShipNoticesRequest($offset, $limit, $status);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAdvanceShipNotices'
     *
     * @param  int $offset The offset of elements in the response. (optional, default to 0)
     * @param  int $limit Maximum number of elements in response. (optional, default to 50)
     * @param  \AllegroApi\Model\AdvanceShipNoticeStatus[] $status A status of the Advance Ship Notices in the response. (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function getAdvanceShipNoticesRequest($offset = 0, $limit = 50, $status = null)
    {
        if ($offset !== null && $offset < 0) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling AdvanceShipNoticesApi.getAdvanceShipNotices, must be bigger than or equal to 0.');
        }

        if ($limit !== null && $limit > 200) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling AdvanceShipNoticesApi.getAdvanceShipNotices, must be smaller than or equal to 200.');
        }
        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling AdvanceShipNoticesApi.getAdvanceShipNotices, must be bigger than or equal to 1.');
        }

        $resourcePath = '/fulfillment/advance-ship-notices';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // query params
        if ($offset !== null) {
            if('form' === 'form' && is_array($offset)) {
                foreach($offset as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['offset'] = $offset;
            }
        }
        // query params
        if ($limit !== null) {
            if('form' === 'form' && is_array($limit)) {
                foreach($limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['limit'] = $limit;
            }
        }
        // query params
        if ($status !== null) {
            if('form' === 'form' && is_array($status)) {
                foreach($status as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['status'] = $status;
            }
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.allegro.public.v1+json', 'application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('GET', $uri, $headers, $httpBody);
    }

    /**
     * Operation getLabelCommand
     *
     * Get labels
     *
     * @param  string $command_id An identifier of the command. (required)
     *
     *@throws \InvalidArgumentException
     * @throws \AllegroApi\Exception\ApiException on non-2xx response
     * @return \AllegroApi\Model\CreateLabelsCommand|\AllegroApi\Model\ErrorsHolder
     */
    public function getLabelCommand($command_id)
    {
        [$response] = $this->getLabelCommandWithHttpInfo($command_id);
        return $response;
    }

    /**
     * Operation getLabelCommandWithHttpInfo
     *
     * Get labels
     *
     * @param  string $command_id An identifier of the command. (required)
     *
     *@throws \InvalidArgumentException
     * @throws \AllegroApi\Exception\ApiException on non-2xx response
     * @return array of \AllegroApi\Model\CreateLabelsCommand|\AllegroApi\Model\ErrorsHolder, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLabelCommandWithHttpInfo($command_id)
    {
        $request = $this->getLabelCommandRequest($command_id);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\AllegroApi\Model\CreateLabelsCommand' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AllegroApi\Model\CreateLabelsCommand', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\AllegroApi\Model\ErrorsHolder' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AllegroApi\Model\ErrorsHolder', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\AllegroApi\Model\CreateLabelsCommand';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AllegroApi\Model\CreateLabelsCommand',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AllegroApi\Model\ErrorsHolder',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getLabelCommandAsync
     *
     * Get labels
     *
     * @param  string $command_id An identifier of the command. (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function getLabelCommandAsync($command_id)
    {
        return $this->getLabelCommandAsyncWithHttpInfo($command_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getLabelCommandAsyncWithHttpInfo
     *
     * Get labels
     *
     * @param  string $command_id An identifier of the command. (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function getLabelCommandAsyncWithHttpInfo($command_id)
    {
        $returnType = '\AllegroApi\Model\CreateLabelsCommand';
        $request = $this->getLabelCommandRequest($command_id);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'getLabelCommand'
     *
     * @param  string $command_id An identifier of the command. (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function getLabelCommandRequest($command_id)
    {
        // verify the required parameter 'command_id' is set
        if ($command_id === null || (is_array($command_id) && count($command_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $command_id when calling getLabelCommand'
            );
        }

        $resourcePath = '/fulfillment/create-labels-commands/{command-id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // path params
        if ($command_id !== null) {
            $resourcePath = str_replace(
                '{' . 'command-id' . '}',
                ObjectSerializer::toPathValue($command_id),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.allegro.public.v1+json', 'application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('GET', $uri, $headers, $httpBody);
    }

    /**
     * Operation getSubmitCommand
     *
     * Get submit status
     *
     * @param  string $command_id An identifier of the command. (required)
     *
     *@throws \InvalidArgumentException
     * @throws \AllegroApi\Exception\ApiException on non-2xx response
     * @return \AllegroApi\Model\SubmitCommand|\AllegroApi\Model\ErrorsHolder
     */
    public function getSubmitCommand($command_id)
    {
        [$response] = $this->getSubmitCommandWithHttpInfo($command_id);
        return $response;
    }

    /**
     * Operation getSubmitCommandWithHttpInfo
     *
     * Get submit status
     *
     * @param  string $command_id An identifier of the command. (required)
     *
     *@throws \InvalidArgumentException
     * @throws \AllegroApi\Exception\ApiException on non-2xx response
     * @return array of \AllegroApi\Model\SubmitCommand|\AllegroApi\Model\ErrorsHolder, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSubmitCommandWithHttpInfo($command_id)
    {
        $request = $this->getSubmitCommandRequest($command_id);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\AllegroApi\Model\SubmitCommand' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AllegroApi\Model\SubmitCommand', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\AllegroApi\Model\ErrorsHolder' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AllegroApi\Model\ErrorsHolder', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\AllegroApi\Model\SubmitCommand';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AllegroApi\Model\SubmitCommand',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AllegroApi\Model\ErrorsHolder',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSubmitCommandAsync
     *
     * Get submit status
     *
     * @param  string $command_id An identifier of the command. (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function getSubmitCommandAsync($command_id)
    {
        return $this->getSubmitCommandAsyncWithHttpInfo($command_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSubmitCommandAsyncWithHttpInfo
     *
     * Get submit status
     *
     * @param  string $command_id An identifier of the command. (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function getSubmitCommandAsyncWithHttpInfo($command_id)
    {
        $returnType = '\AllegroApi\Model\SubmitCommand';
        $request = $this->getSubmitCommandRequest($command_id);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSubmitCommand'
     *
     * @param  string $command_id An identifier of the command. (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function getSubmitCommandRequest($command_id)
    {
        // verify the required parameter 'command_id' is set
        if ($command_id === null || (is_array($command_id) && count($command_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $command_id when calling getSubmitCommand'
            );
        }

        $resourcePath = '/fulfillment/submit-commands/{command-id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // path params
        if ($command_id !== null) {
            $resourcePath = str_replace(
                '{' . 'command-id' . '}',
                ObjectSerializer::toPathValue($command_id),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.allegro.public.v1+json', 'application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('GET', $uri, $headers, $httpBody);
    }

    /**
     * Operation submitCommand
     *
     * Submit the Advance Ship Notice
     *
     * @param  string $command_id The identifier of the command. (required)
     * @param  \AllegroApi\Model\SubmitCommand $submit_command submit_command (required)
     *
     * @throws \InvalidArgumentException
     * @throws \AllegroApi\Exception\ApiException on non-2xx response
     * @return \AllegroApi\Model\SubmitCommand|\AllegroApi\Model\ErrorsHolder
     */
    public function submitCommand($command_id, $submit_command)
    {
        [$response] = $this->submitCommandWithHttpInfo($command_id, $submit_command);
        return $response;
    }

    /**
     * Operation submitCommandWithHttpInfo
     *
     * Submit the Advance Ship Notice
     *
     * @param  string $command_id The identifier of the command. (required)
     * @param  \AllegroApi\Model\SubmitCommand $submit_command (required)
     *
     *@throws \InvalidArgumentException
     * @throws \AllegroApi\Exception\ApiException on non-2xx response
     * @return array of \AllegroApi\Model\SubmitCommand|\AllegroApi\Model\ErrorsHolder, HTTP status code, HTTP response headers (array of strings)
     */
    public function submitCommandWithHttpInfo($command_id, $submit_command)
    {
        $request = $this->submitCommandRequest($command_id, $submit_command);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 201:
                    if ('\AllegroApi\Model\SubmitCommand' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AllegroApi\Model\SubmitCommand', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\AllegroApi\Model\ErrorsHolder' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AllegroApi\Model\ErrorsHolder', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\AllegroApi\Model\SubmitCommand';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AllegroApi\Model\SubmitCommand',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AllegroApi\Model\ErrorsHolder',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation submitCommandAsync
     *
     * Submit the Advance Ship Notice
     *
     * @param  string $command_id The identifier of the command. (required)
     * @param  \AllegroApi\Model\SubmitCommand $submit_command (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function submitCommandAsync($command_id, $submit_command)
    {
        return $this->submitCommandAsyncWithHttpInfo($command_id, $submit_command)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation submitCommandAsyncWithHttpInfo
     *
     * Submit the Advance Ship Notice
     *
     * @param  string $command_id The identifier of the command. (required)
     * @param  \AllegroApi\Model\SubmitCommand $submit_command (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function submitCommandAsyncWithHttpInfo($command_id, $submit_command)
    {
        $returnType = '\AllegroApi\Model\SubmitCommand';
        $request = $this->submitCommandRequest($command_id, $submit_command);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'submitCommand'
     *
     * @param  string $command_id The identifier of the command. (required)
     * @param  \AllegroApi\Model\SubmitCommand $submit_command (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function submitCommandRequest($command_id, $submit_command)
    {
        // verify the required parameter 'command_id' is set
        if ($command_id === null || (is_array($command_id) && count($command_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $command_id when calling submitCommand'
            );
        }
        // verify the required parameter 'submit_command' is set
        if ($submit_command === null || (is_array($submit_command) && count($submit_command) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $submit_command when calling submitCommand'
            );
        }

        $resourcePath = '/fulfillment/submit-commands/{command-id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // path params
        if ($command_id !== null) {
            $resourcePath = str_replace(
                '{' . 'command-id' . '}',
                ObjectSerializer::toPathValue($command_id),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.allegro.public.v1+json', 'application/json'],
            'application/vnd.allegro.public.v1+json',
            $multipart
        );

        // for model (json/xml)
        if (isset($submit_command)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($submit_command));
            } else {
                $httpBody = $submit_command;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('PUT', $uri, $headers, $httpBody);
    }

    /**
     * Operation updateAdvanceShipNotice
     *
     * Update Advance Ship Notice
     *
     * @param  string $id An identifier of Advance Ship Notice. (required)
     * @param  string $if_match A current version of Advance Ship Notice (e.g. from etag header obtained via get). (required)
     * @param  \AllegroApi\Model\AdvanceShipNotice $advance_ship_notice advance_ship_notice (required)
     *
     *@throws \InvalidArgumentException
     * @throws \AllegroApi\Exception\ApiException on non-2xx response
     * @return \AllegroApi\Model\AdvanceShipNoticeResponse|\AllegroApi\Model\ErrorsHolder
     */
    public function updateAdvanceShipNotice($id, $if_match, $advance_ship_notice)
    {
        [$response] = $this->updateAdvanceShipNoticeWithHttpInfo($id, $if_match, $advance_ship_notice);
        return $response;
    }

    /**
     * Operation updateAdvanceShipNoticeWithHttpInfo
     *
     * Update Advance Ship Notice
     *
     * @param  string $id An identifier of Advance Ship Notice. (required)
     * @param  string $if_match A current version of Advance Ship Notice (e.g. from etag header obtained via get). (required)
     * @param  \AllegroApi\Model\AdvanceShipNotice $advance_ship_notice (required)
     *
     *@throws \InvalidArgumentException
     * @throws \AllegroApi\Exception\ApiException on non-2xx response
     * @return array of \AllegroApi\Model\AdvanceShipNoticeResponse|\AllegroApi\Model\ErrorsHolder, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateAdvanceShipNoticeWithHttpInfo($id, $if_match, $advance_ship_notice)
    {
        $request = $this->updateAdvanceShipNoticeRequest($id, $if_match, $advance_ship_notice);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\AllegroApi\Model\AdvanceShipNoticeResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AllegroApi\Model\AdvanceShipNoticeResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\AllegroApi\Model\ErrorsHolder' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AllegroApi\Model\ErrorsHolder', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\AllegroApi\Model\AdvanceShipNoticeResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AllegroApi\Model\AdvanceShipNoticeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AllegroApi\Model\ErrorsHolder',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateAdvanceShipNoticeAsync
     *
     * Update Advance Ship Notice
     *
     * @param  string $id An identifier of Advance Ship Notice. (required)
     * @param  string $if_match A current version of Advance Ship Notice (e.g. from etag header obtained via get). (required)
     * @param  \AllegroApi\Model\AdvanceShipNotice $advance_ship_notice (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function updateAdvanceShipNoticeAsync($id, $if_match, $advance_ship_notice)
    {
        return $this->updateAdvanceShipNoticeAsyncWithHttpInfo($id, $if_match, $advance_ship_notice)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateAdvanceShipNoticeAsyncWithHttpInfo
     *
     * Update Advance Ship Notice
     *
     * @param  string $id An identifier of Advance Ship Notice. (required)
     * @param  string $if_match A current version of Advance Ship Notice (e.g. from etag header obtained via get). (required)
     * @param  \AllegroApi\Model\AdvanceShipNotice $advance_ship_notice (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function updateAdvanceShipNoticeAsyncWithHttpInfo($id, $if_match, $advance_ship_notice)
    {
        $returnType = '\AllegroApi\Model\AdvanceShipNoticeResponse';
        $request = $this->updateAdvanceShipNoticeRequest($id, $if_match, $advance_ship_notice);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateAdvanceShipNotice'
     *
     * @param  string $id An identifier of Advance Ship Notice. (required)
     * @param  string $if_match A current version of Advance Ship Notice (e.g. from etag header obtained via get). (required)
     * @param  \AllegroApi\Model\AdvanceShipNotice $advance_ship_notice (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function updateAdvanceShipNoticeRequest($id, $if_match, $advance_ship_notice)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateAdvanceShipNotice'
            );
        }
        // verify the required parameter 'if_match' is set
        if ($if_match === null || (is_array($if_match) && count($if_match) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $if_match when calling updateAdvanceShipNotice'
            );
        }
        // verify the required parameter 'advance_ship_notice' is set
        if ($advance_ship_notice === null || (is_array($advance_ship_notice) && count($advance_ship_notice) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $advance_ship_notice when calling updateAdvanceShipNotice'
            );
        }

        $resourcePath = '/fulfillment/advance-ship-notices/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // header params
        if ($if_match !== null) {
            $headerParams['if-match'] = ObjectSerializer::toHeaderValue($if_match);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.allegro.public.v1+json', 'application/json'],
            'application/vnd.allegro.public.v1+json',
            $multipart
        );

        // for model (json/xml)
        if (isset($advance_ship_notice)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($advance_ship_notice));
            } else {
                $httpBody = $advance_ship_notice;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('PUT', $uri, $headers, $httpBody);
    }

    /**
     * Operation updateSubmittedAdvanceShipNotice
     *
     * Update submitted Advance Ship Notice
     *
     * @param  string $id An identifier of Advance Ship Notice. (required)
     * @param  string $if_match A current version of Advance Ship Notice (e.g. from etag header obtained via get). (required)
     * @param  \AllegroApi\Model\UpdateSubmittedAdvanceShipNoticeRequest $update_submitted_advance_ship_notice_request update_submitted_advance_ship_notice_request (required)
     *
     * @throws \InvalidArgumentException
     * @throws \AllegroApi\Exception\ApiException on non-2xx response
     * @return \AllegroApi\Model\AdvanceShipNoticeResponse|\AllegroApi\Model\ErrorsHolder
     */
    public function updateSubmittedAdvanceShipNotice($id, $if_match, $update_submitted_advance_ship_notice_request)
    {
        [$response] = $this->updateSubmittedAdvanceShipNoticeWithHttpInfo($id, $if_match, $update_submitted_advance_ship_notice_request);
        return $response;
    }

    /**
     * Operation updateSubmittedAdvanceShipNoticeWithHttpInfo
     *
     * Update submitted Advance Ship Notice
     *
     * @param  string $id An identifier of Advance Ship Notice. (required)
     * @param  string $if_match A current version of Advance Ship Notice (e.g. from etag header obtained via get). (required)
     * @param  \AllegroApi\Model\UpdateSubmittedAdvanceShipNoticeRequest $update_submitted_advance_ship_notice_request (required)
     *
     *@throws \InvalidArgumentException
     * @throws \AllegroApi\Exception\ApiException on non-2xx response
     * @return array of \AllegroApi\Model\AdvanceShipNoticeResponse|\AllegroApi\Model\ErrorsHolder, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateSubmittedAdvanceShipNoticeWithHttpInfo($id, $if_match, $update_submitted_advance_ship_notice_request)
    {
        $request = $this->updateSubmittedAdvanceShipNoticeRequest($id, $if_match, $update_submitted_advance_ship_notice_request);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\AllegroApi\Model\AdvanceShipNoticeResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AllegroApi\Model\AdvanceShipNoticeResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\AllegroApi\Model\ErrorsHolder' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AllegroApi\Model\ErrorsHolder', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\AllegroApi\Model\AdvanceShipNoticeResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AllegroApi\Model\AdvanceShipNoticeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AllegroApi\Model\ErrorsHolder',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateSubmittedAdvanceShipNoticeAsync
     *
     * Update submitted Advance Ship Notice
     *
     * @param  string $id An identifier of Advance Ship Notice. (required)
     * @param  string $if_match A current version of Advance Ship Notice (e.g. from etag header obtained via get). (required)
     * @param  \AllegroApi\Model\UpdateSubmittedAdvanceShipNoticeRequest $update_submitted_advance_ship_notice_request (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function updateSubmittedAdvanceShipNoticeAsync($id, $if_match, $update_submitted_advance_ship_notice_request)
    {
        return $this->updateSubmittedAdvanceShipNoticeAsyncWithHttpInfo($id, $if_match, $update_submitted_advance_ship_notice_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateSubmittedAdvanceShipNoticeAsyncWithHttpInfo
     *
     * Update submitted Advance Ship Notice
     *
     * @param  string $id An identifier of Advance Ship Notice. (required)
     * @param  string $if_match A current version of Advance Ship Notice (e.g. from etag header obtained via get). (required)
     * @param  \AllegroApi\Model\UpdateSubmittedAdvanceShipNoticeRequest $update_submitted_advance_ship_notice_request (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function updateSubmittedAdvanceShipNoticeAsyncWithHttpInfo($id, $if_match, $update_submitted_advance_ship_notice_request)
    {
        $returnType = '\AllegroApi\Model\AdvanceShipNoticeResponse';
        $request = $this->updateSubmittedAdvanceShipNoticeRequest($id, $if_match, $update_submitted_advance_ship_notice_request);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateSubmittedAdvanceShipNotice'
     *
     * @param  string $id An identifier of Advance Ship Notice. (required)
     * @param  string $if_match A current version of Advance Ship Notice (e.g. from etag header obtained via get). (required)
     * @param  \AllegroApi\Model\UpdateSubmittedAdvanceShipNoticeRequest $update_submitted_advance_ship_notice_request (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function updateSubmittedAdvanceShipNoticeRequest($id, $if_match, $update_submitted_advance_ship_notice_request)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateSubmittedAdvanceShipNotice'
            );
        }
        // verify the required parameter 'if_match' is set
        if ($if_match === null || (is_array($if_match) && count($if_match) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $if_match when calling updateSubmittedAdvanceShipNotice'
            );
        }
        // verify the required parameter 'update_submitted_advance_ship_notice_request' is set
        if ($update_submitted_advance_ship_notice_request === null || (is_array($update_submitted_advance_ship_notice_request) && count($update_submitted_advance_ship_notice_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $update_submitted_advance_ship_notice_request when calling updateSubmittedAdvanceShipNotice'
            );
        }

        $resourcePath = '/fulfillment/advance-ship-notice/{id}/submitted';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // header params
        if ($if_match !== null) {
            $headerParams['if-match'] = ObjectSerializer::toHeaderValue($if_match);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.allegro.public.v1+json', 'application/json'],
            'application/vnd.allegro.public.v1+json',
            $multipart
        );

        // for model (json/xml)
        if (isset($update_submitted_advance_ship_notice_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($update_submitted_advance_ship_notice_request));
            } else {
                $httpBody = $update_submitted_advance_ship_notice_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('PUT', $uri, $headers, $httpBody);
    }

    /**
     * @param string $method
     * @param string|UriInterface $uri
     * @param array $headers
     * @param string|StreamInterface|null $body
     *
     * @return RequestInterface
     */
    protected function createRequest(string $method, $uri, array $headers = [], $body = null): RequestInterface
    {
        if ($this->requestFactory instanceof RequestFactory) {
            return $this->requestFactory->createRequest(
                $method,
                $uri,
                $headers,
                $body
            );
        }

        if (is_string($body) && '' !== $body && null === $this->streamFactory) {
            throw new \RuntimeException('Cannot create request: A stream factory is required to create a request with a non-empty string body.');
        }

        $request = $this->requestFactory->createRequest($method, $uri);

        foreach ($headers as $key => $value) {
            $request = $request->withHeader($key, $value);
        }

        if (null !== $body && '' !== $body) {
            $request = $request->withBody(
                is_string($body) ? $this->streamFactory->createStream($body) : $body
            );
        }

        return $request;
    }

    private function createUri(
        string $operationHost,
        string $resourcePath,
        array $queryParams
    ): UriInterface {
        $parsedUrl = parse_url($operationHost);

        $host = $parsedUrl['host'] ?? null;
        $scheme = $parsedUrl['scheme'] ?? null;
        $basePath = $parsedUrl['path'] ?? null;
        $port = $parsedUrl['port'] ?? null;
        $user = $parsedUrl['user'] ?? null;
        $password = $parsedUrl['pass'] ?? null;

        $uri = $this->uriFactory->createUri($basePath . $resourcePath)
            ->withHost($host)
            ->withScheme($scheme)
            ->withPort($port)
            ->withQuery(ObjectSerializer::buildQuery($queryParams));

        if ($user) {
            $uri = $uri->withUserInfo($user, $password);
        }

        return $uri;
    }
}
