<?php
/**
 * PublicOfferInformationApi
 * PHP version 7.2
 *
 * @category Class
 * @package  AllegroApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Allegro REST API
 *
 * https://developer.allegro.pl/about  Documentation is generated from [this](https://developer.allegro.pl/swagger.yaml) OpenAPI 3.0 specification file.
 *
 * The version of the OpenAPI document: latest
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace AllegroApi\Api;

use AllegroApi\Configuration;
use AllegroApi\DebugPlugin;
use AllegroApi\Exception\ApiException;
use AllegroApi\HeaderSelector;
use AllegroApi\ObjectSerializer;
use GuzzleHttp\Psr7\MultipartStream;
use Http\Client\Common\Plugin\ErrorPlugin;
use Http\Client\Common\Plugin\RedirectPlugin;
use Http\Client\Common\PluginClient;
use Http\Client\Common\PluginClientFactory;
use Http\Client\Exception\HttpException;
use Http\Client\HttpAsyncClient;
use Http\Discovery\HttpAsyncClientDiscovery;
use Http\Discovery\Psr17FactoryDiscovery;
use Http\Discovery\Psr18ClientDiscovery;
use Http\Message\RequestFactory;
use Http\Promise\Promise;
use Psr\Http\Client\ClientExceptionInterface;
use Psr\Http\Client\ClientInterface;
use Psr\Http\Message\RequestFactoryInterface;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\StreamFactoryInterface;
use Psr\Http\Message\UriFactoryInterface;
use Psr\Http\Message\UriInterface;

use function sprintf;

/**
 * PublicOfferInformationApi Class Doc Comment
 *
 * @category Class
 * @package  AllegroApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class PublicOfferInformationApi
{
    /**
     * @var PluginClient
     */
    protected $httpClient;

    /**
     * @var PluginClient
     */
    protected $httpAsyncClient;

    /**
     * @var UriFactoryInterface
     */
    protected $uriFactory;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @var RequestFactoryInterface
     */
    protected $requestFactory;

    /**
     * @var StreamFactoryInterface
     */
    protected $streamFactory;

    public function __construct(
        ClientInterface $httpClient = null,
        Configuration $config = null,
        HttpAsyncClient $httpAsyncClient = null,
        UriFactoryInterface $uriFactory = null,
        RequestFactoryInterface $requestFactory = null,
        StreamFactoryInterface $streamFactory = null,
        HeaderSelector $selector = null,
        ?array $plugins = null,
        $hostIndex = 0
    ) {
        $this->config = $config ?? (new Configuration())->setHost('https://api.allegro.pl');
        $this->requestFactory = $requestFactory ?? Psr17FactoryDiscovery::findRequestFactory();
        $this->streamFactory = $streamFactory ?? Psr17FactoryDiscovery::findStreamFactory();

        $plugins = $plugins ?? [
            new RedirectPlugin(['strict' => true]),
            new ErrorPlugin(),
        ];

        if ($this->config->getDebug()) {
            $plugins[] = new DebugPlugin(fopen($this->config->getDebugFile(), 'ab'));
        }

        $this->httpClient = (new PluginClientFactory())->createClient(
            $httpClient ?? Psr18ClientDiscovery::find(),
            $plugins
        );

        $this->httpAsyncClient = (new PluginClientFactory())->createClient(
            $httpAsyncClient ?? HttpAsyncClientDiscovery::find(),
            $plugins
        );

        $this->uriFactory = $uriFactory ?? Psr17FactoryDiscovery::findUriFactory();

        $this->headerSelector = $selector ?? new HeaderSelector();

        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getListing
     *
     * Search offers
     *
     * @param  string $category_id The identifier of the category, where you want to search for offers. (optional)
     * @param  string $phrase The search phrase. The phrase is searched in different fields of the offers depending on the value of the &#x60;searchMode&#x60; parameter. (optional)
     * @param  string $seller_id The identifier of a seller, to limit the results to offers from this seller. May be provided more than once. Should not be provided when seller.login is given. (optional)
     * @param  string $seller_login The login of a seller, to limit the results to offers from this seller. May be provided more than once. Should not be provided when seller.id is given. (optional)
     * @param  string $marketplace_id Id of a marketplace where offers are visible. *Acceptable values* : &#x60;allegro-pl&#x60;, &#x60;allegro-cz&#x60;, &#x60;allegro-sk&#x60;. (optional, default to 'allegro-pl')
     * @param  string $shipping_country Limits the result to offers with specified delivery country. *Default value* : depends on marketplace, for allegro-pl: &#x60;PL&#x60;, for allegro-cz: &#x60;CZ&#x60;, for allegro-sk: &#x60;SK&#x60;. Check endpoint GET /marketplaces for acceptable values. (optional)
     * @param  string $currency Currency of the offer prices. *Default value* : depends on marketplace, for allegro-pl: &#x60;PLN&#x60;, for allegro-cz: &#x60;CZK&#x60;, for allegro-sk: &#x60;EUR&#x60;. Check endpoint GET /marketplaces for acceptable currency values. (optional)
     * @param  string $accept_language Limits offers to the only translated to specified language. Also expected language of messages. *Default value* : depends on marketplace, for allegro-pl: &#x60;pl-PL&#x60;, for allegro-cz: &#x60;cs-CZ&#x60;, for allegro-sk: &#x60;sk-SK&#x60;. Check endpoint GET /marketplaces for acceptable language values. (optional)
     * @param  string $search_mode Defines where the given phrase should be searched in. Allowed values:    - *REGULAR* - searching for a phrase in the title,   - *DESCRIPTIONS* - searching for a phrase in the title and the descriptions,   - *CLOSED* - searching for a phrase in the title of closed offers. Available only for &#x60;allegro-pl&#x60; marketplace. (optional, default to 'REGULAR')
     * @param  int $offset Index of the first returned offer from all search results. Max offset is &#x60;600 - &lt;limit&gt;&#x60;. (optional, default to 0)
     * @param  int $limit The maximum number of offers in a response. (optional, default to 60)
     * @param  string $sort Search results sorting order. &#x60;+&#x60; or no prefix in the value means ascending order. &#x60;-&#x60; prefix means descending order. (optional, default to 'relevance')
     * @param  string $include Specify parts of the response that should be included in the output. Allowed values are the names of top level entities and *all* as an alias to all entities. By default, all top level entities are included. Use &#x60;-&#x60; prefix to exclude an entity. Example: &#x60;include&#x3D;-all&amp;include&#x3D;filters&amp;include&#x3D;sort&#x60; - returns only filters and sort entities. (optional)
     * @param  bool $fallback Defines the behaviour of the search engine when no results with exact phrase match are found:    - *true* - related (not exact) results are returned,   - *false* - empty results are returned. (optional, default to true)
     * @param  array<string,string> $dynamic_filters You can filter and customize your search results to find exactly what you need by applying filters ids and their dictionary values to query according to the flowing pattern: id&#x3D;value. When the filter definition looks like:   &#x60;&#x60;&#x60;&#x60;     {       \&quot;id\&quot;: \&quot;parameter.11323\&quot;,       \&quot;type\&quot;: \&quot;MULTI\&quot;,       \&quot;name\&quot;: \&quot;Stan\&quot;,       \&quot;values\&quot;: [{           \&quot;value\&quot;: \&quot;11323_1\&quot;,           \&quot;name\&quot;: \&quot;nowe\&quot;,           \&quot;count\&quot;: 21,           \&quot;selected\&quot;: false         },         {           \&quot;value\&quot;: \&quot;11323_2\&quot;,           \&quot;name\&quot;: \&quot;używane\&quot;,           \&quot;count\&quot;: 157,           \&quot;selected\&quot;: false         },         {           \&quot;value\&quot;: \&quot;11323_238066\&quot;,           \&quot;name\&quot;: \&quot;po zwrocie\&quot;,           \&quot;count\&quot;: 1,           \&quot;selected\&quot;: false         }       ]     }   &#x60;&#x60;&#x60;&#x60; You can use &#39;Stan&#39; filter to query results, i.e.:   * &#x60;parameter.11323&#x3D;11323_1&#x60; for \&quot;nowe\&quot;   * &#x60;parameter.11323&#x3D;11323_2&#x60; for \&quot;używane\&quot;   * &#x60;parameter.11323&#x3D;11323_238066&#x60; for \&quot;po zwrocie\&quot;. (optional)
     *
     *@throws \AllegroApi\Exception\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \AllegroApi\Model\ListingResponse|\AllegroApi\Model\ErrorsHolder|\AllegroApi\Model\ErrorsHolder|\AllegroApi\Model\ErrorsHolder|\AllegroApi\Model\ErrorsHolder|\AllegroApi\Model\ErrorsHolder|\AllegroApi\Model\ErrorsHolder|\AllegroApi\Model\ErrorsHolder
     */
    public function getListing($category_id = null, $phrase = null, $seller_id = null, $seller_login = null, $marketplace_id = 'allegro-pl', $shipping_country = null, $currency = null, $accept_language = null, $search_mode = 'REGULAR', $offset = 0, $limit = 60, $sort = 'relevance', $include = null, $fallback = true, $dynamic_filters = null)
    {
        [$response] = $this->getListingWithHttpInfo($category_id, $phrase, $seller_id, $seller_login, $marketplace_id, $shipping_country, $currency, $accept_language, $search_mode, $offset, $limit, $sort, $include, $fallback, $dynamic_filters);
        return $response;
    }

    /**
     * Operation getListingWithHttpInfo
     *
     * Search offers
     *
     * @param  string $category_id The identifier of the category, where you want to search for offers. (optional)
     * @param  string $phrase The search phrase. The phrase is searched in different fields of the offers depending on the value of the &#x60;searchMode&#x60; parameter. (optional)
     * @param  string $seller_id The identifier of a seller, to limit the results to offers from this seller. May be provided more than once. Should not be provided when seller.login is given. (optional)
     * @param  string $seller_login The login of a seller, to limit the results to offers from this seller. May be provided more than once. Should not be provided when seller.id is given. (optional)
     * @param  string $marketplace_id Id of a marketplace where offers are visible. *Acceptable values* : &#x60;allegro-pl&#x60;, &#x60;allegro-cz&#x60;, &#x60;allegro-sk&#x60;. (optional, default to 'allegro-pl')
     * @param  string $shipping_country Limits the result to offers with specified delivery country. *Default value* : depends on marketplace, for allegro-pl: &#x60;PL&#x60;, for allegro-cz: &#x60;CZ&#x60;, for allegro-sk: &#x60;SK&#x60;. Check endpoint GET /marketplaces for acceptable values. (optional)
     * @param  string $currency Currency of the offer prices. *Default value* : depends on marketplace, for allegro-pl: &#x60;PLN&#x60;, for allegro-cz: &#x60;CZK&#x60;, for allegro-sk: &#x60;EUR&#x60;. Check endpoint GET /marketplaces for acceptable currency values. (optional)
     * @param  string $accept_language Limits offers to the only translated to specified language. Also expected language of messages. *Default value* : depends on marketplace, for allegro-pl: &#x60;pl-PL&#x60;, for allegro-cz: &#x60;cs-CZ&#x60;, for allegro-sk: &#x60;sk-SK&#x60;. Check endpoint GET /marketplaces for acceptable language values. (optional)
     * @param  string $search_mode Defines where the given phrase should be searched in. Allowed values:    - *REGULAR* - searching for a phrase in the title,   - *DESCRIPTIONS* - searching for a phrase in the title and the descriptions,   - *CLOSED* - searching for a phrase in the title of closed offers. Available only for &#x60;allegro-pl&#x60; marketplace. (optional, default to 'REGULAR')
     * @param  int $offset Index of the first returned offer from all search results. Max offset is &#x60;600 - &lt;limit&gt;&#x60;. (optional, default to 0)
     * @param  int $limit The maximum number of offers in a response. (optional, default to 60)
     * @param  string $sort Search results sorting order. &#x60;+&#x60; or no prefix in the value means ascending order. &#x60;-&#x60; prefix means descending order. (optional, default to 'relevance')
     * @param  string $include Specify parts of the response that should be included in the output. Allowed values are the names of top level entities and *all* as an alias to all entities. By default, all top level entities are included. Use &#x60;-&#x60; prefix to exclude an entity. Example: &#x60;include&#x3D;-all&amp;include&#x3D;filters&amp;include&#x3D;sort&#x60; - returns only filters and sort entities. (optional)
     * @param  bool $fallback Defines the behaviour of the search engine when no results with exact phrase match are found:    - *true* - related (not exact) results are returned,   - *false* - empty results are returned. (optional, default to true)
     * @param  array<string,string> $dynamic_filters You can filter and customize your search results to find exactly what you need by applying filters ids and their dictionary values to query according to the flowing pattern: id&#x3D;value. When the filter definition looks like:   &#x60;&#x60;&#x60;&#x60;     {       \&quot;id\&quot;: \&quot;parameter.11323\&quot;,       \&quot;type\&quot;: \&quot;MULTI\&quot;,       \&quot;name\&quot;: \&quot;Stan\&quot;,       \&quot;values\&quot;: [{           \&quot;value\&quot;: \&quot;11323_1\&quot;,           \&quot;name\&quot;: \&quot;nowe\&quot;,           \&quot;count\&quot;: 21,           \&quot;selected\&quot;: false         },         {           \&quot;value\&quot;: \&quot;11323_2\&quot;,           \&quot;name\&quot;: \&quot;używane\&quot;,           \&quot;count\&quot;: 157,           \&quot;selected\&quot;: false         },         {           \&quot;value\&quot;: \&quot;11323_238066\&quot;,           \&quot;name\&quot;: \&quot;po zwrocie\&quot;,           \&quot;count\&quot;: 1,           \&quot;selected\&quot;: false         }       ]     }   &#x60;&#x60;&#x60;&#x60; You can use &#39;Stan&#39; filter to query results, i.e.:   * &#x60;parameter.11323&#x3D;11323_1&#x60; for \&quot;nowe\&quot;   * &#x60;parameter.11323&#x3D;11323_2&#x60; for \&quot;używane\&quot;   * &#x60;parameter.11323&#x3D;11323_238066&#x60; for \&quot;po zwrocie\&quot;. (optional)
     *
     *@throws \AllegroApi\Exception\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \AllegroApi\Model\ListingResponse|\AllegroApi\Model\ErrorsHolder|\AllegroApi\Model\ErrorsHolder|\AllegroApi\Model\ErrorsHolder|\AllegroApi\Model\ErrorsHolder|\AllegroApi\Model\ErrorsHolder|\AllegroApi\Model\ErrorsHolder|\AllegroApi\Model\ErrorsHolder, HTTP status code, HTTP response headers (array of strings)
     */
    public function getListingWithHttpInfo($category_id = null, $phrase = null, $seller_id = null, $seller_login = null, $marketplace_id = 'allegro-pl', $shipping_country = null, $currency = null, $accept_language = null, $search_mode = 'REGULAR', $offset = 0, $limit = 60, $sort = 'relevance', $include = null, $fallback = true, $dynamic_filters = null)
    {
        $request = $this->getListingRequest($category_id, $phrase, $seller_id, $seller_login, $marketplace_id, $shipping_country, $currency, $accept_language, $search_mode, $offset, $limit, $sort, $include, $fallback, $dynamic_filters);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\AllegroApi\Model\ListingResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AllegroApi\Model\ListingResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\AllegroApi\Model\ErrorsHolder' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AllegroApi\Model\ErrorsHolder', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\AllegroApi\Model\ErrorsHolder' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AllegroApi\Model\ErrorsHolder', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\AllegroApi\Model\ErrorsHolder' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AllegroApi\Model\ErrorsHolder', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\AllegroApi\Model\ErrorsHolder' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AllegroApi\Model\ErrorsHolder', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\AllegroApi\Model\ErrorsHolder' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AllegroApi\Model\ErrorsHolder', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\AllegroApi\Model\ErrorsHolder' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AllegroApi\Model\ErrorsHolder', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 502:
                    if ('\AllegroApi\Model\ErrorsHolder' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AllegroApi\Model\ErrorsHolder', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\AllegroApi\Model\ListingResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AllegroApi\Model\ListingResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AllegroApi\Model\ErrorsHolder',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AllegroApi\Model\ErrorsHolder',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AllegroApi\Model\ErrorsHolder',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AllegroApi\Model\ErrorsHolder',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AllegroApi\Model\ErrorsHolder',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AllegroApi\Model\ErrorsHolder',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 502:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AllegroApi\Model\ErrorsHolder',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getListingAsync
     *
     * Search offers
     *
     * @param  string $category_id The identifier of the category, where you want to search for offers. (optional)
     * @param  string $phrase The search phrase. The phrase is searched in different fields of the offers depending on the value of the &#x60;searchMode&#x60; parameter. (optional)
     * @param  string $seller_id The identifier of a seller, to limit the results to offers from this seller. May be provided more than once. Should not be provided when seller.login is given. (optional)
     * @param  string $seller_login The login of a seller, to limit the results to offers from this seller. May be provided more than once. Should not be provided when seller.id is given. (optional)
     * @param  string $marketplace_id Id of a marketplace where offers are visible. *Acceptable values* : &#x60;allegro-pl&#x60;, &#x60;allegro-cz&#x60;, &#x60;allegro-sk&#x60;. (optional, default to 'allegro-pl')
     * @param  string $shipping_country Limits the result to offers with specified delivery country. *Default value* : depends on marketplace, for allegro-pl: &#x60;PL&#x60;, for allegro-cz: &#x60;CZ&#x60;, for allegro-sk: &#x60;SK&#x60;. Check endpoint GET /marketplaces for acceptable values. (optional)
     * @param  string $currency Currency of the offer prices. *Default value* : depends on marketplace, for allegro-pl: &#x60;PLN&#x60;, for allegro-cz: &#x60;CZK&#x60;, for allegro-sk: &#x60;EUR&#x60;. Check endpoint GET /marketplaces for acceptable currency values. (optional)
     * @param  string $accept_language Limits offers to the only translated to specified language. Also expected language of messages. *Default value* : depends on marketplace, for allegro-pl: &#x60;pl-PL&#x60;, for allegro-cz: &#x60;cs-CZ&#x60;, for allegro-sk: &#x60;sk-SK&#x60;. Check endpoint GET /marketplaces for acceptable language values. (optional)
     * @param  string $search_mode Defines where the given phrase should be searched in. Allowed values:    - *REGULAR* - searching for a phrase in the title,   - *DESCRIPTIONS* - searching for a phrase in the title and the descriptions,   - *CLOSED* - searching for a phrase in the title of closed offers. Available only for &#x60;allegro-pl&#x60; marketplace. (optional, default to 'REGULAR')
     * @param  int $offset Index of the first returned offer from all search results. Max offset is &#x60;600 - &lt;limit&gt;&#x60;. (optional, default to 0)
     * @param  int $limit The maximum number of offers in a response. (optional, default to 60)
     * @param  string $sort Search results sorting order. &#x60;+&#x60; or no prefix in the value means ascending order. &#x60;-&#x60; prefix means descending order. (optional, default to 'relevance')
     * @param  string $include Specify parts of the response that should be included in the output. Allowed values are the names of top level entities and *all* as an alias to all entities. By default, all top level entities are included. Use &#x60;-&#x60; prefix to exclude an entity. Example: &#x60;include&#x3D;-all&amp;include&#x3D;filters&amp;include&#x3D;sort&#x60; - returns only filters and sort entities. (optional)
     * @param  bool $fallback Defines the behaviour of the search engine when no results with exact phrase match are found:    - *true* - related (not exact) results are returned,   - *false* - empty results are returned. (optional, default to true)
     * @param  array<string,string> $dynamic_filters You can filter and customize your search results to find exactly what you need by applying filters ids and their dictionary values to query according to the flowing pattern: id&#x3D;value. When the filter definition looks like:   &#x60;&#x60;&#x60;&#x60;     {       \&quot;id\&quot;: \&quot;parameter.11323\&quot;,       \&quot;type\&quot;: \&quot;MULTI\&quot;,       \&quot;name\&quot;: \&quot;Stan\&quot;,       \&quot;values\&quot;: [{           \&quot;value\&quot;: \&quot;11323_1\&quot;,           \&quot;name\&quot;: \&quot;nowe\&quot;,           \&quot;count\&quot;: 21,           \&quot;selected\&quot;: false         },         {           \&quot;value\&quot;: \&quot;11323_2\&quot;,           \&quot;name\&quot;: \&quot;używane\&quot;,           \&quot;count\&quot;: 157,           \&quot;selected\&quot;: false         },         {           \&quot;value\&quot;: \&quot;11323_238066\&quot;,           \&quot;name\&quot;: \&quot;po zwrocie\&quot;,           \&quot;count\&quot;: 1,           \&quot;selected\&quot;: false         }       ]     }   &#x60;&#x60;&#x60;&#x60; You can use &#39;Stan&#39; filter to query results, i.e.:   * &#x60;parameter.11323&#x3D;11323_1&#x60; for \&quot;nowe\&quot;   * &#x60;parameter.11323&#x3D;11323_2&#x60; for \&quot;używane\&quot;   * &#x60;parameter.11323&#x3D;11323_238066&#x60; for \&quot;po zwrocie\&quot;. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function getListingAsync($category_id = null, $phrase = null, $seller_id = null, $seller_login = null, $marketplace_id = 'allegro-pl', $shipping_country = null, $currency = null, $accept_language = null, $search_mode = 'REGULAR', $offset = 0, $limit = 60, $sort = 'relevance', $include = null, $fallback = true, $dynamic_filters = null)
    {
        return $this->getListingAsyncWithHttpInfo($category_id, $phrase, $seller_id, $seller_login, $marketplace_id, $shipping_country, $currency, $accept_language, $search_mode, $offset, $limit, $sort, $include, $fallback, $dynamic_filters)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getListingAsyncWithHttpInfo
     *
     * Search offers
     *
     * @param  string $category_id The identifier of the category, where you want to search for offers. (optional)
     * @param  string $phrase The search phrase. The phrase is searched in different fields of the offers depending on the value of the &#x60;searchMode&#x60; parameter. (optional)
     * @param  string $seller_id The identifier of a seller, to limit the results to offers from this seller. May be provided more than once. Should not be provided when seller.login is given. (optional)
     * @param  string $seller_login The login of a seller, to limit the results to offers from this seller. May be provided more than once. Should not be provided when seller.id is given. (optional)
     * @param  string $marketplace_id Id of a marketplace where offers are visible. *Acceptable values* : &#x60;allegro-pl&#x60;, &#x60;allegro-cz&#x60;, &#x60;allegro-sk&#x60;. (optional, default to 'allegro-pl')
     * @param  string $shipping_country Limits the result to offers with specified delivery country. *Default value* : depends on marketplace, for allegro-pl: &#x60;PL&#x60;, for allegro-cz: &#x60;CZ&#x60;, for allegro-sk: &#x60;SK&#x60;. Check endpoint GET /marketplaces for acceptable values. (optional)
     * @param  string $currency Currency of the offer prices. *Default value* : depends on marketplace, for allegro-pl: &#x60;PLN&#x60;, for allegro-cz: &#x60;CZK&#x60;, for allegro-sk: &#x60;EUR&#x60;. Check endpoint GET /marketplaces for acceptable currency values. (optional)
     * @param  string $accept_language Limits offers to the only translated to specified language. Also expected language of messages. *Default value* : depends on marketplace, for allegro-pl: &#x60;pl-PL&#x60;, for allegro-cz: &#x60;cs-CZ&#x60;, for allegro-sk: &#x60;sk-SK&#x60;. Check endpoint GET /marketplaces for acceptable language values. (optional)
     * @param  string $search_mode Defines where the given phrase should be searched in. Allowed values:    - *REGULAR* - searching for a phrase in the title,   - *DESCRIPTIONS* - searching for a phrase in the title and the descriptions,   - *CLOSED* - searching for a phrase in the title of closed offers. Available only for &#x60;allegro-pl&#x60; marketplace. (optional, default to 'REGULAR')
     * @param  int $offset Index of the first returned offer from all search results. Max offset is &#x60;600 - &lt;limit&gt;&#x60;. (optional, default to 0)
     * @param  int $limit The maximum number of offers in a response. (optional, default to 60)
     * @param  string $sort Search results sorting order. &#x60;+&#x60; or no prefix in the value means ascending order. &#x60;-&#x60; prefix means descending order. (optional, default to 'relevance')
     * @param  string $include Specify parts of the response that should be included in the output. Allowed values are the names of top level entities and *all* as an alias to all entities. By default, all top level entities are included. Use &#x60;-&#x60; prefix to exclude an entity. Example: &#x60;include&#x3D;-all&amp;include&#x3D;filters&amp;include&#x3D;sort&#x60; - returns only filters and sort entities. (optional)
     * @param  bool $fallback Defines the behaviour of the search engine when no results with exact phrase match are found:    - *true* - related (not exact) results are returned,   - *false* - empty results are returned. (optional, default to true)
     * @param  array<string,string> $dynamic_filters You can filter and customize your search results to find exactly what you need by applying filters ids and their dictionary values to query according to the flowing pattern: id&#x3D;value. When the filter definition looks like:   &#x60;&#x60;&#x60;&#x60;     {       \&quot;id\&quot;: \&quot;parameter.11323\&quot;,       \&quot;type\&quot;: \&quot;MULTI\&quot;,       \&quot;name\&quot;: \&quot;Stan\&quot;,       \&quot;values\&quot;: [{           \&quot;value\&quot;: \&quot;11323_1\&quot;,           \&quot;name\&quot;: \&quot;nowe\&quot;,           \&quot;count\&quot;: 21,           \&quot;selected\&quot;: false         },         {           \&quot;value\&quot;: \&quot;11323_2\&quot;,           \&quot;name\&quot;: \&quot;używane\&quot;,           \&quot;count\&quot;: 157,           \&quot;selected\&quot;: false         },         {           \&quot;value\&quot;: \&quot;11323_238066\&quot;,           \&quot;name\&quot;: \&quot;po zwrocie\&quot;,           \&quot;count\&quot;: 1,           \&quot;selected\&quot;: false         }       ]     }   &#x60;&#x60;&#x60;&#x60; You can use &#39;Stan&#39; filter to query results, i.e.:   * &#x60;parameter.11323&#x3D;11323_1&#x60; for \&quot;nowe\&quot;   * &#x60;parameter.11323&#x3D;11323_2&#x60; for \&quot;używane\&quot;   * &#x60;parameter.11323&#x3D;11323_238066&#x60; for \&quot;po zwrocie\&quot;. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function getListingAsyncWithHttpInfo($category_id = null, $phrase = null, $seller_id = null, $seller_login = null, $marketplace_id = 'allegro-pl', $shipping_country = null, $currency = null, $accept_language = null, $search_mode = 'REGULAR', $offset = 0, $limit = 60, $sort = 'relevance', $include = null, $fallback = true, $dynamic_filters = null)
    {
        $returnType = '\AllegroApi\Model\ListingResponse';
        $request = $this->getListingRequest($category_id, $phrase, $seller_id, $seller_login, $marketplace_id, $shipping_country, $currency, $accept_language, $search_mode, $offset, $limit, $sort, $include, $fallback, $dynamic_filters);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'getListing'
     *
     * @param  string $category_id The identifier of the category, where you want to search for offers. (optional)
     * @param  string $phrase The search phrase. The phrase is searched in different fields of the offers depending on the value of the &#x60;searchMode&#x60; parameter. (optional)
     * @param  string $seller_id The identifier of a seller, to limit the results to offers from this seller. May be provided more than once. Should not be provided when seller.login is given. (optional)
     * @param  string $seller_login The login of a seller, to limit the results to offers from this seller. May be provided more than once. Should not be provided when seller.id is given. (optional)
     * @param  string $marketplace_id Id of a marketplace where offers are visible. *Acceptable values* : &#x60;allegro-pl&#x60;, &#x60;allegro-cz&#x60;, &#x60;allegro-sk&#x60;. (optional, default to 'allegro-pl')
     * @param  string $shipping_country Limits the result to offers with specified delivery country. *Default value* : depends on marketplace, for allegro-pl: &#x60;PL&#x60;, for allegro-cz: &#x60;CZ&#x60;, for allegro-sk: &#x60;SK&#x60;. Check endpoint GET /marketplaces for acceptable values. (optional)
     * @param  string $currency Currency of the offer prices. *Default value* : depends on marketplace, for allegro-pl: &#x60;PLN&#x60;, for allegro-cz: &#x60;CZK&#x60;, for allegro-sk: &#x60;EUR&#x60;. Check endpoint GET /marketplaces for acceptable currency values. (optional)
     * @param  string $accept_language Limits offers to the only translated to specified language. Also expected language of messages. *Default value* : depends on marketplace, for allegro-pl: &#x60;pl-PL&#x60;, for allegro-cz: &#x60;cs-CZ&#x60;, for allegro-sk: &#x60;sk-SK&#x60;. Check endpoint GET /marketplaces for acceptable language values. (optional)
     * @param  string $search_mode Defines where the given phrase should be searched in. Allowed values:    - *REGULAR* - searching for a phrase in the title,   - *DESCRIPTIONS* - searching for a phrase in the title and the descriptions,   - *CLOSED* - searching for a phrase in the title of closed offers. Available only for &#x60;allegro-pl&#x60; marketplace. (optional, default to 'REGULAR')
     * @param  int $offset Index of the first returned offer from all search results. Max offset is &#x60;600 - &lt;limit&gt;&#x60;. (optional, default to 0)
     * @param  int $limit The maximum number of offers in a response. (optional, default to 60)
     * @param  string $sort Search results sorting order. &#x60;+&#x60; or no prefix in the value means ascending order. &#x60;-&#x60; prefix means descending order. (optional, default to 'relevance')
     * @param  string $include Specify parts of the response that should be included in the output. Allowed values are the names of top level entities and *all* as an alias to all entities. By default, all top level entities are included. Use &#x60;-&#x60; prefix to exclude an entity. Example: &#x60;include&#x3D;-all&amp;include&#x3D;filters&amp;include&#x3D;sort&#x60; - returns only filters and sort entities. (optional)
     * @param  bool $fallback Defines the behaviour of the search engine when no results with exact phrase match are found:    - *true* - related (not exact) results are returned,   - *false* - empty results are returned. (optional, default to true)
     * @param  array<string,string> $dynamic_filters You can filter and customize your search results to find exactly what you need by applying filters ids and their dictionary values to query according to the flowing pattern: id&#x3D;value. When the filter definition looks like:   &#x60;&#x60;&#x60;&#x60;     {       \&quot;id\&quot;: \&quot;parameter.11323\&quot;,       \&quot;type\&quot;: \&quot;MULTI\&quot;,       \&quot;name\&quot;: \&quot;Stan\&quot;,       \&quot;values\&quot;: [{           \&quot;value\&quot;: \&quot;11323_1\&quot;,           \&quot;name\&quot;: \&quot;nowe\&quot;,           \&quot;count\&quot;: 21,           \&quot;selected\&quot;: false         },         {           \&quot;value\&quot;: \&quot;11323_2\&quot;,           \&quot;name\&quot;: \&quot;używane\&quot;,           \&quot;count\&quot;: 157,           \&quot;selected\&quot;: false         },         {           \&quot;value\&quot;: \&quot;11323_238066\&quot;,           \&quot;name\&quot;: \&quot;po zwrocie\&quot;,           \&quot;count\&quot;: 1,           \&quot;selected\&quot;: false         }       ]     }   &#x60;&#x60;&#x60;&#x60; You can use &#39;Stan&#39; filter to query results, i.e.:   * &#x60;parameter.11323&#x3D;11323_1&#x60; for \&quot;nowe\&quot;   * &#x60;parameter.11323&#x3D;11323_2&#x60; for \&quot;używane\&quot;   * &#x60;parameter.11323&#x3D;11323_238066&#x60; for \&quot;po zwrocie\&quot;. (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function getListingRequest($category_id = null, $phrase = null, $seller_id = null, $seller_login = null, $marketplace_id = 'allegro-pl', $shipping_country = null, $currency = null, $accept_language = null, $search_mode = 'REGULAR', $offset = 0, $limit = 60, $sort = 'relevance', $include = null, $fallback = true, $dynamic_filters = null)
    {
        if ($offset !== null && $offset > 599) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling PublicOfferInformationApi.getListing, must be smaller than or equal to 599.');
        }
        if ($offset !== null && $offset < 0) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling PublicOfferInformationApi.getListing, must be bigger than or equal to 0.');
        }

        if ($limit !== null && $limit > 60) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling PublicOfferInformationApi.getListing, must be smaller than or equal to 60.');
        }
        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling PublicOfferInformationApi.getListing, must be bigger than or equal to 1.');
        }

        $resourcePath = '/offers/listing';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // query params
        if ($category_id !== null) {
            if('form' === 'form' && is_array($category_id)) {
                foreach($category_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['category.id'] = $category_id;
            }
        }
        // query params
        if ($phrase !== null) {
            if('form' === 'form' && is_array($phrase)) {
                foreach($phrase as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['phrase'] = $phrase;
            }
        }
        // query params
        if ($seller_id !== null) {
            if('form' === 'form' && is_array($seller_id)) {
                foreach($seller_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['seller.id'] = $seller_id;
            }
        }
        // query params
        if ($seller_login !== null) {
            if('form' === 'form' && is_array($seller_login)) {
                foreach($seller_login as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['seller.login'] = $seller_login;
            }
        }
        // query params
        if ($marketplace_id !== null) {
            if('form' === 'form' && is_array($marketplace_id)) {
                foreach($marketplace_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['marketplaceId'] = $marketplace_id;
            }
        }
        // query params
        if ($shipping_country !== null) {
            if('form' === 'form' && is_array($shipping_country)) {
                foreach($shipping_country as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['shipping.country'] = $shipping_country;
            }
        }
        // query params
        if ($currency !== null) {
            if('form' === 'form' && is_array($currency)) {
                foreach($currency as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['currency'] = $currency;
            }
        }
        // query params
        if ($search_mode !== null) {
            if('form' === 'form' && is_array($search_mode)) {
                foreach($search_mode as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['searchMode'] = $search_mode;
            }
        }
        // query params
        if ($offset !== null) {
            if('form' === 'form' && is_array($offset)) {
                foreach($offset as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['offset'] = $offset;
            }
        }
        // query params
        if ($limit !== null) {
            if('form' === 'form' && is_array($limit)) {
                foreach($limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['limit'] = $limit;
            }
        }
        // query params
        if ($sort !== null) {
            if('form' === 'form' && is_array($sort)) {
                foreach($sort as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['sort'] = $sort;
            }
        }
        // query params
        if ($include !== null) {
            if('form' === 'form' && is_array($include)) {
                foreach($include as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['include'] = $include;
            }
        }
        // query params
        if ($fallback !== null) {
            if('form' === 'form' && is_array($fallback)) {
                foreach($fallback as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['fallback'] = $fallback;
            }
        }
        // query params
        if ($dynamic_filters !== null) {
            if('form' === 'form' && is_array($dynamic_filters)) {
                foreach($dynamic_filters as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['Dynamic filters'] = $dynamic_filters;
            }
        }

        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = ObjectSerializer::toHeaderValue($accept_language);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.allegro.public.v1+json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('GET', $uri, $headers, $httpBody);
    }

    /**
     * @param string $method
     * @param string|UriInterface $uri
     * @param array $headers
     * @param string|StreamInterface|null $body
     *
     * @return RequestInterface
     */
    protected function createRequest(string $method, $uri, array $headers = [], $body = null): RequestInterface
    {
        if ($this->requestFactory instanceof RequestFactory) {
            return $this->requestFactory->createRequest(
                $method,
                $uri,
                $headers,
                $body
            );
        }

        if (is_string($body) && '' !== $body && null === $this->streamFactory) {
            throw new \RuntimeException('Cannot create request: A stream factory is required to create a request with a non-empty string body.');
        }

        $request = $this->requestFactory->createRequest($method, $uri);

        foreach ($headers as $key => $value) {
            $request = $request->withHeader($key, $value);
        }

        if (null !== $body && '' !== $body) {
            $request = $request->withBody(
                is_string($body) ? $this->streamFactory->createStream($body) : $body
            );
        }

        return $request;
    }

    private function createUri(
        string $operationHost,
        string $resourcePath,
        array $queryParams
    ): UriInterface {
        $parsedUrl = parse_url($operationHost);

        $host = $parsedUrl['host'] ?? null;
        $scheme = $parsedUrl['scheme'] ?? null;
        $basePath = $parsedUrl['path'] ?? null;
        $port = $parsedUrl['port'] ?? null;
        $user = $parsedUrl['user'] ?? null;
        $password = $parsedUrl['pass'] ?? null;

        $uri = $this->uriFactory->createUri($basePath . $resourcePath)
            ->withHost($host)
            ->withScheme($scheme)
            ->withPort($port)
            ->withQuery(ObjectSerializer::buildQuery($queryParams));

        if ($user) {
            $uri = $uri->withUserInfo($user, $password);
        }

        return $uri;
    }
}
