<?php
/**
 * MessageCenterApi
 * PHP version 7.2
 *
 * @category Class
 * @package  AllegroApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Allegro REST API
 *
 * https://developer.allegro.pl/about  Documentation is generated from [this](https://developer.allegro.pl/swagger.yaml) OpenAPI 3.0 specification file.
 *
 * The version of the OpenAPI document: latest
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace AllegroApi\Api;

use AllegroApi\Configuration;
use AllegroApi\DebugPlugin;
use AllegroApi\Exception\ApiException;
use AllegroApi\HeaderSelector;
use AllegroApi\ObjectSerializer;
use GuzzleHttp\Psr7\MultipartStream;
use Http\Client\Common\Plugin\ErrorPlugin;
use Http\Client\Common\Plugin\RedirectPlugin;
use Http\Client\Common\PluginClient;
use Http\Client\Common\PluginClientFactory;
use Http\Client\Exception\HttpException;
use Http\Client\HttpAsyncClient;
use Http\Discovery\HttpAsyncClientDiscovery;
use Http\Discovery\Psr17FactoryDiscovery;
use Http\Discovery\Psr18ClientDiscovery;
use Http\Message\RequestFactory;
use Http\Promise\Promise;
use Psr\Http\Client\ClientExceptionInterface;
use Psr\Http\Client\ClientInterface;
use Psr\Http\Message\RequestFactoryInterface;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\StreamFactoryInterface;
use Psr\Http\Message\UriFactoryInterface;
use Psr\Http\Message\UriInterface;

use function sprintf;

/**
 * MessageCenterApi Class Doc Comment
 *
 * @category Class
 * @package  AllegroApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class MessageCenterApi
{
    /**
     * @var PluginClient
     */
    protected $httpClient;

    /**
     * @var PluginClient
     */
    protected $httpAsyncClient;

    /**
     * @var UriFactoryInterface
     */
    protected $uriFactory;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @var RequestFactoryInterface
     */
    protected $requestFactory;

    /**
     * @var StreamFactoryInterface
     */
    protected $streamFactory;

    public function __construct(
        ClientInterface $httpClient = null,
        Configuration $config = null,
        HttpAsyncClient $httpAsyncClient = null,
        UriFactoryInterface $uriFactory = null,
        RequestFactoryInterface $requestFactory = null,
        StreamFactoryInterface $streamFactory = null,
        HeaderSelector $selector = null,
        ?array $plugins = null,
        $hostIndex = 0
    ) {
        $this->config = $config ?? (new Configuration())->setHost('https://api.allegro.pl');
        $this->requestFactory = $requestFactory ?? Psr17FactoryDiscovery::findRequestFactory();
        $this->streamFactory = $streamFactory ?? Psr17FactoryDiscovery::findStreamFactory();

        $plugins = $plugins ?? [
            new RedirectPlugin(['strict' => true]),
            new ErrorPlugin(),
        ];

        if ($this->config->getDebug()) {
            $plugins[] = new DebugPlugin(fopen($this->config->getDebugFile(), 'ab'));
        }

        $this->httpClient = (new PluginClientFactory())->createClient(
            $httpClient ?? Psr18ClientDiscovery::find(),
            $plugins
        );

        $this->httpAsyncClient = (new PluginClientFactory())->createClient(
            $httpAsyncClient ?? HttpAsyncClientDiscovery::find(),
            $plugins
        );

        $this->uriFactory = $uriFactory ?? Psr17FactoryDiscovery::findUriFactory();

        $this->headerSelector = $selector ?? new HeaderSelector();

        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation changeReadFlagOnThreadPUT
     *
     * Mark a particular thread as read
     *
     * @param  string $thread_id Identifier of thread to be marked. (required)
     * @param  \AllegroApi\Model\ThreadReadFlag $thread_read_flag Updated read flag (required)
     *
     *@throws \InvalidArgumentException
     * @throws \AllegroApi\Exception\ApiException on non-2xx response
     * @return \AllegroApi\Model\Thread
     */
    public function changeReadFlagOnThreadPUT($thread_id, $thread_read_flag)
    {
        [$response] = $this->changeReadFlagOnThreadPUTWithHttpInfo($thread_id, $thread_read_flag);
        return $response;
    }

    /**
     * Operation changeReadFlagOnThreadPUTWithHttpInfo
     *
     * Mark a particular thread as read
     *
     * @param  string $thread_id Identifier of thread to be marked. (required)
     * @param  \AllegroApi\Model\ThreadReadFlag $thread_read_flag Updated read flag (required)
     *
     *@throws \InvalidArgumentException
     * @throws \AllegroApi\Exception\ApiException on non-2xx response
     * @return array of \AllegroApi\Model\Thread, HTTP status code, HTTP response headers (array of strings)
     */
    public function changeReadFlagOnThreadPUTWithHttpInfo($thread_id, $thread_read_flag)
    {
        $request = $this->changeReadFlagOnThreadPUTRequest($thread_id, $thread_read_flag);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\AllegroApi\Model\Thread' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AllegroApi\Model\Thread', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\AllegroApi\Model\Thread';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AllegroApi\Model\Thread',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation changeReadFlagOnThreadPUTAsync
     *
     * Mark a particular thread as read
     *
     * @param  string $thread_id Identifier of thread to be marked. (required)
     * @param  \AllegroApi\Model\ThreadReadFlag $thread_read_flag Updated read flag (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function changeReadFlagOnThreadPUTAsync($thread_id, $thread_read_flag)
    {
        return $this->changeReadFlagOnThreadPUTAsyncWithHttpInfo($thread_id, $thread_read_flag)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation changeReadFlagOnThreadPUTAsyncWithHttpInfo
     *
     * Mark a particular thread as read
     *
     * @param  string $thread_id Identifier of thread to be marked. (required)
     * @param  \AllegroApi\Model\ThreadReadFlag $thread_read_flag Updated read flag (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function changeReadFlagOnThreadPUTAsyncWithHttpInfo($thread_id, $thread_read_flag)
    {
        $returnType = '\AllegroApi\Model\Thread';
        $request = $this->changeReadFlagOnThreadPUTRequest($thread_id, $thread_read_flag);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'changeReadFlagOnThreadPUT'
     *
     * @param  string $thread_id Identifier of thread to be marked. (required)
     * @param  \AllegroApi\Model\ThreadReadFlag $thread_read_flag Updated read flag (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function changeReadFlagOnThreadPUTRequest($thread_id, $thread_read_flag)
    {
        // verify the required parameter 'thread_id' is set
        if ($thread_id === null || (is_array($thread_id) && count($thread_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $thread_id when calling changeReadFlagOnThreadPUT'
            );
        }
        // verify the required parameter 'thread_read_flag' is set
        if ($thread_read_flag === null || (is_array($thread_read_flag) && count($thread_read_flag) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $thread_read_flag when calling changeReadFlagOnThreadPUT'
            );
        }

        $resourcePath = '/messaging/threads/{threadId}/read';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // path params
        if ($thread_id !== null) {
            $resourcePath = str_replace(
                '{' . 'threadId' . '}',
                ObjectSerializer::toPathValue($thread_id),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.allegro.public.v1+json'],
            'application/vnd.allegro.public.v1+json',
            $multipart
        );

        // for model (json/xml)
        if (isset($thread_read_flag)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($thread_read_flag));
            } else {
                $httpBody = $thread_read_flag;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('PUT', $uri, $headers, $httpBody);
    }

    /**
     * Operation deleteMessageDELETE
     *
     * Delete single message
     *
     * @param  string $message_id Identifier of the message to delete. (required)
     *
     * @throws \InvalidArgumentException
     * @throws \AllegroApi\Exception\ApiException on non-2xx response
     * @return void
     */
    public function deleteMessageDELETE($message_id)
    {
        $this->deleteMessageDELETEWithHttpInfo($message_id);
    }

    /**
     * Operation deleteMessageDELETEWithHttpInfo
     *
     * Delete single message
     *
     * @param  string $message_id Identifier of the message to delete. (required)
     *
     *@throws \InvalidArgumentException
     * @throws \AllegroApi\Exception\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteMessageDELETEWithHttpInfo($message_id)
    {
        $request = $this->deleteMessageDELETERequest($message_id);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteMessageDELETEAsync
     *
     * Delete single message
     *
     * @param  string $message_id Identifier of the message to delete. (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function deleteMessageDELETEAsync($message_id)
    {
        return $this->deleteMessageDELETEAsyncWithHttpInfo($message_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteMessageDELETEAsyncWithHttpInfo
     *
     * Delete single message
     *
     * @param  string $message_id Identifier of the message to delete. (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function deleteMessageDELETEAsyncWithHttpInfo($message_id)
    {
        $returnType = '';
        $request = $this->deleteMessageDELETERequest($message_id);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteMessageDELETE'
     *
     * @param  string $message_id Identifier of the message to delete. (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function deleteMessageDELETERequest($message_id)
    {
        // verify the required parameter 'message_id' is set
        if ($message_id === null || (is_array($message_id) && count($message_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $message_id when calling deleteMessageDELETE'
            );
        }

        $resourcePath = '/messaging/messages/{messageId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // path params
        if ($message_id !== null) {
            $resourcePath = str_replace(
                '{' . 'messageId' . '}',
                ObjectSerializer::toPathValue($message_id),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            [],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('DELETE', $uri, $headers, $httpBody);
    }

    /**
     * Operation downloadAttachmentGET
     *
     * Download attachment
     *
     * @param  string $attachment_id Identifier of the attachment that will be downloaded. (required)
     *
     * @throws \InvalidArgumentException
     * @throws \AllegroApi\Exception\ApiException on non-2xx response
     * @return \SplFileObject
     */
    public function downloadAttachmentGET($attachment_id)
    {
        [$response] = $this->downloadAttachmentGETWithHttpInfo($attachment_id);
        return $response;
    }

    /**
     * Operation downloadAttachmentGETWithHttpInfo
     *
     * Download attachment
     *
     * @param  string $attachment_id Identifier of the attachment that will be downloaded. (required)
     *
     *@throws \InvalidArgumentException
     * @throws \AllegroApi\Exception\ApiException on non-2xx response
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function downloadAttachmentGETWithHttpInfo($attachment_id)
    {
        $request = $this->downloadAttachmentGETRequest($attachment_id);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\SplFileObject' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SplFileObject', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SplFileObject';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation downloadAttachmentGETAsync
     *
     * Download attachment
     *
     * @param  string $attachment_id Identifier of the attachment that will be downloaded. (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function downloadAttachmentGETAsync($attachment_id)
    {
        return $this->downloadAttachmentGETAsyncWithHttpInfo($attachment_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation downloadAttachmentGETAsyncWithHttpInfo
     *
     * Download attachment
     *
     * @param  string $attachment_id Identifier of the attachment that will be downloaded. (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function downloadAttachmentGETAsyncWithHttpInfo($attachment_id)
    {
        $returnType = '\SplFileObject';
        $request = $this->downloadAttachmentGETRequest($attachment_id);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'downloadAttachmentGET'
     *
     * @param  string $attachment_id Identifier of the attachment that will be downloaded. (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function downloadAttachmentGETRequest($attachment_id)
    {
        // verify the required parameter 'attachment_id' is set
        if ($attachment_id === null || (is_array($attachment_id) && count($attachment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $attachment_id when calling downloadAttachmentGET'
            );
        }

        $resourcePath = '/messaging/message-attachments/{attachmentId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // path params
        if ($attachment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'attachmentId' . '}',
                ObjectSerializer::toPathValue($attachment_id),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ['*/*'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('GET', $uri, $headers, $httpBody);
    }

    /**
     * Operation getMessageGET
     *
     * Get single message
     *
     * @param  string $message_id Identifier of message to be returned. (required)
     *
     * @throws \InvalidArgumentException
     * @throws \AllegroApi\Exception\ApiException on non-2xx response
     * @return \AllegroApi\Model\Message
     */
    public function getMessageGET($message_id)
    {
        [$response] = $this->getMessageGETWithHttpInfo($message_id);
        return $response;
    }

    /**
     * Operation getMessageGETWithHttpInfo
     *
     * Get single message
     *
     * @param  string $message_id Identifier of message to be returned. (required)
     *
     *@throws \InvalidArgumentException
     * @throws \AllegroApi\Exception\ApiException on non-2xx response
     * @return array of \AllegroApi\Model\Message, HTTP status code, HTTP response headers (array of strings)
     */
    public function getMessageGETWithHttpInfo($message_id)
    {
        $request = $this->getMessageGETRequest($message_id);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\AllegroApi\Model\Message' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AllegroApi\Model\Message', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\AllegroApi\Model\Message';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AllegroApi\Model\Message',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getMessageGETAsync
     *
     * Get single message
     *
     * @param  string $message_id Identifier of message to be returned. (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function getMessageGETAsync($message_id)
    {
        return $this->getMessageGETAsyncWithHttpInfo($message_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getMessageGETAsyncWithHttpInfo
     *
     * Get single message
     *
     * @param  string $message_id Identifier of message to be returned. (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function getMessageGETAsyncWithHttpInfo($message_id)
    {
        $returnType = '\AllegroApi\Model\Message';
        $request = $this->getMessageGETRequest($message_id);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'getMessageGET'
     *
     * @param  string $message_id Identifier of message to be returned. (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function getMessageGETRequest($message_id)
    {
        // verify the required parameter 'message_id' is set
        if ($message_id === null || (is_array($message_id) && count($message_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $message_id when calling getMessageGET'
            );
        }

        $resourcePath = '/messaging/messages/{messageId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // path params
        if ($message_id !== null) {
            $resourcePath = str_replace(
                '{' . 'messageId' . '}',
                ObjectSerializer::toPathValue($message_id),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.allegro.public.v1+json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('GET', $uri, $headers, $httpBody);
    }

    /**
     * Operation getThreadGET
     *
     * Get user thread
     *
     * @param  string $thread_id Identifier of thread to get. (required)
     *
     * @throws \InvalidArgumentException
     * @throws \AllegroApi\Exception\ApiException on non-2xx response
     * @return \AllegroApi\Model\Thread
     */
    public function getThreadGET($thread_id)
    {
        [$response] = $this->getThreadGETWithHttpInfo($thread_id);
        return $response;
    }

    /**
     * Operation getThreadGETWithHttpInfo
     *
     * Get user thread
     *
     * @param  string $thread_id Identifier of thread to get. (required)
     *
     *@throws \InvalidArgumentException
     * @throws \AllegroApi\Exception\ApiException on non-2xx response
     * @return array of \AllegroApi\Model\Thread, HTTP status code, HTTP response headers (array of strings)
     */
    public function getThreadGETWithHttpInfo($thread_id)
    {
        $request = $this->getThreadGETRequest($thread_id);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\AllegroApi\Model\Thread' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AllegroApi\Model\Thread', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\AllegroApi\Model\Thread';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AllegroApi\Model\Thread',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getThreadGETAsync
     *
     * Get user thread
     *
     * @param  string $thread_id Identifier of thread to get. (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function getThreadGETAsync($thread_id)
    {
        return $this->getThreadGETAsyncWithHttpInfo($thread_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getThreadGETAsyncWithHttpInfo
     *
     * Get user thread
     *
     * @param  string $thread_id Identifier of thread to get. (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function getThreadGETAsyncWithHttpInfo($thread_id)
    {
        $returnType = '\AllegroApi\Model\Thread';
        $request = $this->getThreadGETRequest($thread_id);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'getThreadGET'
     *
     * @param  string $thread_id Identifier of thread to get. (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function getThreadGETRequest($thread_id)
    {
        // verify the required parameter 'thread_id' is set
        if ($thread_id === null || (is_array($thread_id) && count($thread_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $thread_id when calling getThreadGET'
            );
        }

        $resourcePath = '/messaging/threads/{threadId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // path params
        if ($thread_id !== null) {
            $resourcePath = str_replace(
                '{' . 'threadId' . '}',
                ObjectSerializer::toPathValue($thread_id),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.allegro.public.v1+json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('GET', $uri, $headers, $httpBody);
    }

    /**
     * Operation listMessagesGET
     *
     * List messages in thread
     *
     * @param  string $thread_id Identifier of thread to get messages from. (required)
     * @param  int $limit The maximum number of messages returned in the response. (optional, default to 20)
     * @param  int $offset Index of the first returned message from all results. (optional, default to 0)
     * @param  \DateTime $before Message creation date before filter parameter (exclusive) - cannot be used with offset. (optional)
     * @param  \DateTime $after Message creation date after filter parameter (exclusive). (optional)
     *
     * @throws \InvalidArgumentException
     * @throws \AllegroApi\Exception\ApiException on non-2xx response
     * @return \AllegroApi\Model\MessagesList
     */
    public function listMessagesGET($thread_id, $limit = 20, $offset = 0, $before = null, $after = null)
    {
        [$response] = $this->listMessagesGETWithHttpInfo($thread_id, $limit, $offset, $before, $after);
        return $response;
    }

    /**
     * Operation listMessagesGETWithHttpInfo
     *
     * List messages in thread
     *
     * @param  string $thread_id Identifier of thread to get messages from. (required)
     * @param  int $limit The maximum number of messages returned in the response. (optional, default to 20)
     * @param  int $offset Index of the first returned message from all results. (optional, default to 0)
     * @param  \DateTime $before Message creation date before filter parameter (exclusive) - cannot be used with offset. (optional)
     * @param  \DateTime $after Message creation date after filter parameter (exclusive). (optional)
     *
     *@throws \InvalidArgumentException
     * @throws \AllegroApi\Exception\ApiException on non-2xx response
     * @return array of \AllegroApi\Model\MessagesList, HTTP status code, HTTP response headers (array of strings)
     */
    public function listMessagesGETWithHttpInfo($thread_id, $limit = 20, $offset = 0, $before = null, $after = null)
    {
        $request = $this->listMessagesGETRequest($thread_id, $limit, $offset, $before, $after);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\AllegroApi\Model\MessagesList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AllegroApi\Model\MessagesList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\AllegroApi\Model\MessagesList';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AllegroApi\Model\MessagesList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listMessagesGETAsync
     *
     * List messages in thread
     *
     * @param  string $thread_id Identifier of thread to get messages from. (required)
     * @param  int $limit The maximum number of messages returned in the response. (optional, default to 20)
     * @param  int $offset Index of the first returned message from all results. (optional, default to 0)
     * @param  \DateTime $before Message creation date before filter parameter (exclusive) - cannot be used with offset. (optional)
     * @param  \DateTime $after Message creation date after filter parameter (exclusive). (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function listMessagesGETAsync($thread_id, $limit = 20, $offset = 0, $before = null, $after = null)
    {
        return $this->listMessagesGETAsyncWithHttpInfo($thread_id, $limit, $offset, $before, $after)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listMessagesGETAsyncWithHttpInfo
     *
     * List messages in thread
     *
     * @param  string $thread_id Identifier of thread to get messages from. (required)
     * @param  int $limit The maximum number of messages returned in the response. (optional, default to 20)
     * @param  int $offset Index of the first returned message from all results. (optional, default to 0)
     * @param  \DateTime $before Message creation date before filter parameter (exclusive) - cannot be used with offset. (optional)
     * @param  \DateTime $after Message creation date after filter parameter (exclusive). (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function listMessagesGETAsyncWithHttpInfo($thread_id, $limit = 20, $offset = 0, $before = null, $after = null)
    {
        $returnType = '\AllegroApi\Model\MessagesList';
        $request = $this->listMessagesGETRequest($thread_id, $limit, $offset, $before, $after);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'listMessagesGET'
     *
     * @param  string $thread_id Identifier of thread to get messages from. (required)
     * @param  int $limit The maximum number of messages returned in the response. (optional, default to 20)
     * @param  int $offset Index of the first returned message from all results. (optional, default to 0)
     * @param  \DateTime $before Message creation date before filter parameter (exclusive) - cannot be used with offset. (optional)
     * @param  \DateTime $after Message creation date after filter parameter (exclusive). (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function listMessagesGETRequest($thread_id, $limit = 20, $offset = 0, $before = null, $after = null)
    {
        // verify the required parameter 'thread_id' is set
        if ($thread_id === null || (is_array($thread_id) && count($thread_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $thread_id when calling listMessagesGET'
            );
        }
        if ($limit !== null && $limit > 20) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling MessageCenterApi.listMessagesGET, must be smaller than or equal to 20.');
        }
        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling MessageCenterApi.listMessagesGET, must be bigger than or equal to 1.');
        }

        if ($offset !== null && $offset > 15000) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling MessageCenterApi.listMessagesGET, must be smaller than or equal to 15000.');
        }
        if ($offset !== null && $offset < 0) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling MessageCenterApi.listMessagesGET, must be bigger than or equal to 0.');
        }

        $resourcePath = '/messaging/threads/{threadId}/messages';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // query params
        if ($limit !== null) {
            if('form' === 'form' && is_array($limit)) {
                foreach($limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['limit'] = $limit;
            }
        }
        // query params
        if ($offset !== null) {
            if('form' === 'form' && is_array($offset)) {
                foreach($offset as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['offset'] = $offset;
            }
        }
        // query params
        if ($before !== null) {
            if('form' === 'form' && is_array($before)) {
                foreach($before as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['before'] = $before;
            }
        }
        // query params
        if ($after !== null) {
            if('form' === 'form' && is_array($after)) {
                foreach($after as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['after'] = $after;
            }
        }

        // path params
        if ($thread_id !== null) {
            $resourcePath = str_replace(
                '{' . 'threadId' . '}',
                ObjectSerializer::toPathValue($thread_id),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.allegro.public.v1+json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('GET', $uri, $headers, $httpBody);
    }

    /**
     * Operation listThreadsGET
     *
     * List user threads
     *
     * @param  int $limit The maximum number of threads returned in the response. (optional, default to 20)
     * @param  int $offset Index of the first returned thread from all results. (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @throws \AllegroApi\Exception\ApiException on non-2xx response
     * @return \AllegroApi\Model\ThreadsList
     */
    public function listThreadsGET($limit = 20, $offset = 0)
    {
        [$response] = $this->listThreadsGETWithHttpInfo($limit, $offset);
        return $response;
    }

    /**
     * Operation listThreadsGETWithHttpInfo
     *
     * List user threads
     *
     * @param  int $limit The maximum number of threads returned in the response. (optional, default to 20)
     * @param  int $offset Index of the first returned thread from all results. (optional, default to 0)
     *
     *@throws \InvalidArgumentException
     * @throws \AllegroApi\Exception\ApiException on non-2xx response
     * @return array of \AllegroApi\Model\ThreadsList, HTTP status code, HTTP response headers (array of strings)
     */
    public function listThreadsGETWithHttpInfo($limit = 20, $offset = 0)
    {
        $request = $this->listThreadsGETRequest($limit, $offset);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\AllegroApi\Model\ThreadsList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AllegroApi\Model\ThreadsList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\AllegroApi\Model\ThreadsList';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AllegroApi\Model\ThreadsList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listThreadsGETAsync
     *
     * List user threads
     *
     * @param  int $limit The maximum number of threads returned in the response. (optional, default to 20)
     * @param  int $offset Index of the first returned thread from all results. (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function listThreadsGETAsync($limit = 20, $offset = 0)
    {
        return $this->listThreadsGETAsyncWithHttpInfo($limit, $offset)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listThreadsGETAsyncWithHttpInfo
     *
     * List user threads
     *
     * @param  int $limit The maximum number of threads returned in the response. (optional, default to 20)
     * @param  int $offset Index of the first returned thread from all results. (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function listThreadsGETAsyncWithHttpInfo($limit = 20, $offset = 0)
    {
        $returnType = '\AllegroApi\Model\ThreadsList';
        $request = $this->listThreadsGETRequest($limit, $offset);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'listThreadsGET'
     *
     * @param  int $limit The maximum number of threads returned in the response. (optional, default to 20)
     * @param  int $offset Index of the first returned thread from all results. (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function listThreadsGETRequest($limit = 20, $offset = 0)
    {
        if ($limit !== null && $limit > 20) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling MessageCenterApi.listThreadsGET, must be smaller than or equal to 20.');
        }
        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling MessageCenterApi.listThreadsGET, must be bigger than or equal to 1.');
        }

        if ($offset !== null && $offset > 15000000) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling MessageCenterApi.listThreadsGET, must be smaller than or equal to 15000000.');
        }
        if ($offset !== null && $offset < 0) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling MessageCenterApi.listThreadsGET, must be bigger than or equal to 0.');
        }

        $resourcePath = '/messaging/threads';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // query params
        if ($limit !== null) {
            if('form' === 'form' && is_array($limit)) {
                foreach($limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['limit'] = $limit;
            }
        }
        // query params
        if ($offset !== null) {
            if('form' === 'form' && is_array($offset)) {
                foreach($offset as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['offset'] = $offset;
            }
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.allegro.public.v1+json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('GET', $uri, $headers, $httpBody);
    }

    /**
     * Operation newAttachmentDeclarationPOST
     *
     * Add attachment declaration
     *
     * @param  \AllegroApi\Model\NewAttachmentDeclaration $new_attachment_declaration new_attachment_declaration (required)
     *
     * @throws \InvalidArgumentException
     * @throws \AllegroApi\Exception\ApiException on non-2xx response
     * @return \AllegroApi\Model\MessageAttachmentId
     */
    public function newAttachmentDeclarationPOST($new_attachment_declaration)
    {
        [$response] = $this->newAttachmentDeclarationPOSTWithHttpInfo($new_attachment_declaration);
        return $response;
    }

    /**
     * Operation newAttachmentDeclarationPOSTWithHttpInfo
     *
     * Add attachment declaration
     *
     * @param  \AllegroApi\Model\NewAttachmentDeclaration $new_attachment_declaration (required)
     *
     *@throws \InvalidArgumentException
     * @throws \AllegroApi\Exception\ApiException on non-2xx response
     * @return array of \AllegroApi\Model\MessageAttachmentId, HTTP status code, HTTP response headers (array of strings)
     */
    public function newAttachmentDeclarationPOSTWithHttpInfo($new_attachment_declaration)
    {
        $request = $this->newAttachmentDeclarationPOSTRequest($new_attachment_declaration);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 201:
                    if ('\AllegroApi\Model\MessageAttachmentId' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AllegroApi\Model\MessageAttachmentId', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\AllegroApi\Model\MessageAttachmentId';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AllegroApi\Model\MessageAttachmentId',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation newAttachmentDeclarationPOSTAsync
     *
     * Add attachment declaration
     *
     * @param  \AllegroApi\Model\NewAttachmentDeclaration $new_attachment_declaration (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function newAttachmentDeclarationPOSTAsync($new_attachment_declaration)
    {
        return $this->newAttachmentDeclarationPOSTAsyncWithHttpInfo($new_attachment_declaration)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation newAttachmentDeclarationPOSTAsyncWithHttpInfo
     *
     * Add attachment declaration
     *
     * @param  \AllegroApi\Model\NewAttachmentDeclaration $new_attachment_declaration (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function newAttachmentDeclarationPOSTAsyncWithHttpInfo($new_attachment_declaration)
    {
        $returnType = '\AllegroApi\Model\MessageAttachmentId';
        $request = $this->newAttachmentDeclarationPOSTRequest($new_attachment_declaration);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'newAttachmentDeclarationPOST'
     *
     * @param  \AllegroApi\Model\NewAttachmentDeclaration $new_attachment_declaration (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function newAttachmentDeclarationPOSTRequest($new_attachment_declaration)
    {
        // verify the required parameter 'new_attachment_declaration' is set
        if ($new_attachment_declaration === null || (is_array($new_attachment_declaration) && count($new_attachment_declaration) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $new_attachment_declaration when calling newAttachmentDeclarationPOST'
            );
        }

        $resourcePath = '/messaging/message-attachments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.allegro.public.v1+json'],
            'application/vnd.allegro.public.v1+json',
            $multipart
        );

        // for model (json/xml)
        if (isset($new_attachment_declaration)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($new_attachment_declaration));
            } else {
                $httpBody = $new_attachment_declaration;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('POST', $uri, $headers, $httpBody);
    }

    /**
     * Operation newMessageInThreadPOST
     *
     * Write a new message in thread
     *
     * @param  string $thread_id Identifier of thread to write message to. (required)
     * @param  \AllegroApi\Model\NewMessageInThread $new_message_in_thread new_message_in_thread (required)
     *
     *@throws \InvalidArgumentException
     * @throws \AllegroApi\Exception\ApiException on non-2xx response
     * @return \AllegroApi\Model\Message
     */
    public function newMessageInThreadPOST($thread_id, $new_message_in_thread)
    {
        [$response] = $this->newMessageInThreadPOSTWithHttpInfo($thread_id, $new_message_in_thread);
        return $response;
    }

    /**
     * Operation newMessageInThreadPOSTWithHttpInfo
     *
     * Write a new message in thread
     *
     * @param  string $thread_id Identifier of thread to write message to. (required)
     * @param  \AllegroApi\Model\NewMessageInThread $new_message_in_thread (required)
     *
     *@throws \InvalidArgumentException
     * @throws \AllegroApi\Exception\ApiException on non-2xx response
     * @return array of \AllegroApi\Model\Message, HTTP status code, HTTP response headers (array of strings)
     */
    public function newMessageInThreadPOSTWithHttpInfo($thread_id, $new_message_in_thread)
    {
        $request = $this->newMessageInThreadPOSTRequest($thread_id, $new_message_in_thread);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 201:
                    if ('\AllegroApi\Model\Message' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AllegroApi\Model\Message', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\AllegroApi\Model\Message';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AllegroApi\Model\Message',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation newMessageInThreadPOSTAsync
     *
     * Write a new message in thread
     *
     * @param  string $thread_id Identifier of thread to write message to. (required)
     * @param  \AllegroApi\Model\NewMessageInThread $new_message_in_thread (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function newMessageInThreadPOSTAsync($thread_id, $new_message_in_thread)
    {
        return $this->newMessageInThreadPOSTAsyncWithHttpInfo($thread_id, $new_message_in_thread)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation newMessageInThreadPOSTAsyncWithHttpInfo
     *
     * Write a new message in thread
     *
     * @param  string $thread_id Identifier of thread to write message to. (required)
     * @param  \AllegroApi\Model\NewMessageInThread $new_message_in_thread (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function newMessageInThreadPOSTAsyncWithHttpInfo($thread_id, $new_message_in_thread)
    {
        $returnType = '\AllegroApi\Model\Message';
        $request = $this->newMessageInThreadPOSTRequest($thread_id, $new_message_in_thread);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'newMessageInThreadPOST'
     *
     * @param  string $thread_id Identifier of thread to write message to. (required)
     * @param  \AllegroApi\Model\NewMessageInThread $new_message_in_thread (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function newMessageInThreadPOSTRequest($thread_id, $new_message_in_thread)
    {
        // verify the required parameter 'thread_id' is set
        if ($thread_id === null || (is_array($thread_id) && count($thread_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $thread_id when calling newMessageInThreadPOST'
            );
        }
        // verify the required parameter 'new_message_in_thread' is set
        if ($new_message_in_thread === null || (is_array($new_message_in_thread) && count($new_message_in_thread) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $new_message_in_thread when calling newMessageInThreadPOST'
            );
        }

        $resourcePath = '/messaging/threads/{threadId}/messages';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // path params
        if ($thread_id !== null) {
            $resourcePath = str_replace(
                '{' . 'threadId' . '}',
                ObjectSerializer::toPathValue($thread_id),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.allegro.public.v1+json'],
            'application/vnd.allegro.public.v1+json',
            $multipart
        );

        // for model (json/xml)
        if (isset($new_message_in_thread)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($new_message_in_thread));
            } else {
                $httpBody = $new_message_in_thread;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('POST', $uri, $headers, $httpBody);
    }

    /**
     * Operation newMessagePOST
     *
     * Write a new message
     *
     * @param  \AllegroApi\Model\NewMessage $new_message Object representing new message. (required)
     *
     *@throws \InvalidArgumentException
     * @throws \AllegroApi\Exception\ApiException on non-2xx response
     * @return \AllegroApi\Model\Message
     */
    public function newMessagePOST($new_message)
    {
        [$response] = $this->newMessagePOSTWithHttpInfo($new_message);
        return $response;
    }

    /**
     * Operation newMessagePOSTWithHttpInfo
     *
     * Write a new message
     *
     * @param  \AllegroApi\Model\NewMessage $new_message Object representing new message. (required)
     *
     *@throws \InvalidArgumentException
     * @throws \AllegroApi\Exception\ApiException on non-2xx response
     * @return array of \AllegroApi\Model\Message, HTTP status code, HTTP response headers (array of strings)
     */
    public function newMessagePOSTWithHttpInfo($new_message)
    {
        $request = $this->newMessagePOSTRequest($new_message);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 201:
                    if ('\AllegroApi\Model\Message' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AllegroApi\Model\Message', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\AllegroApi\Model\Message';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AllegroApi\Model\Message',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation newMessagePOSTAsync
     *
     * Write a new message
     *
     * @param  \AllegroApi\Model\NewMessage $new_message Object representing new message. (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function newMessagePOSTAsync($new_message)
    {
        return $this->newMessagePOSTAsyncWithHttpInfo($new_message)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation newMessagePOSTAsyncWithHttpInfo
     *
     * Write a new message
     *
     * @param  \AllegroApi\Model\NewMessage $new_message Object representing new message. (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function newMessagePOSTAsyncWithHttpInfo($new_message)
    {
        $returnType = '\AllegroApi\Model\Message';
        $request = $this->newMessagePOSTRequest($new_message);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'newMessagePOST'
     *
     * @param  \AllegroApi\Model\NewMessage $new_message Object representing new message. (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function newMessagePOSTRequest($new_message)
    {
        // verify the required parameter 'new_message' is set
        if ($new_message === null || (is_array($new_message) && count($new_message) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $new_message when calling newMessagePOST'
            );
        }

        $resourcePath = '/messaging/messages';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.allegro.public.v1+json'],
            'application/vnd.allegro.public.v1+json',
            $multipart
        );

        // for model (json/xml)
        if (isset($new_message)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($new_message));
            } else {
                $httpBody = $new_message;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('POST', $uri, $headers, $httpBody);
    }

    /**
     * Operation uploadAttachmentPUT
     *
     * Upload attachment binary data
     *
     * @param  string $attachment_id The identifier of attachment that will be uploaded. (required)
     * @param  \SplFileObject $body body (required)
     *
     *@throws \InvalidArgumentException
     * @throws \AllegroApi\Exception\ApiException on non-2xx response
     * @return \AllegroApi\Model\MessageAttachmentId
     */
    public function uploadAttachmentPUT($attachment_id, $body)
    {
        [$response] = $this->uploadAttachmentPUTWithHttpInfo($attachment_id, $body);
        return $response;
    }

    /**
     * Operation uploadAttachmentPUTWithHttpInfo
     *
     * Upload attachment binary data
     *
     * @param  string $attachment_id The identifier of attachment that will be uploaded. (required)
     * @param  \SplFileObject $body (required)
     *
     *@throws \InvalidArgumentException
     * @throws \AllegroApi\Exception\ApiException on non-2xx response
     * @return array of \AllegroApi\Model\MessageAttachmentId, HTTP status code, HTTP response headers (array of strings)
     */
    public function uploadAttachmentPUTWithHttpInfo($attachment_id, $body)
    {
        $request = $this->uploadAttachmentPUTRequest($attachment_id, $body);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\AllegroApi\Model\MessageAttachmentId' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AllegroApi\Model\MessageAttachmentId', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\AllegroApi\Model\MessageAttachmentId';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AllegroApi\Model\MessageAttachmentId',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation uploadAttachmentPUTAsync
     *
     * Upload attachment binary data
     *
     * @param  string $attachment_id The identifier of attachment that will be uploaded. (required)
     * @param  \SplFileObject $body (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function uploadAttachmentPUTAsync($attachment_id, $body)
    {
        return $this->uploadAttachmentPUTAsyncWithHttpInfo($attachment_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation uploadAttachmentPUTAsyncWithHttpInfo
     *
     * Upload attachment binary data
     *
     * @param  string $attachment_id The identifier of attachment that will be uploaded. (required)
     * @param  \SplFileObject $body (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function uploadAttachmentPUTAsyncWithHttpInfo($attachment_id, $body)
    {
        $returnType = '\AllegroApi\Model\MessageAttachmentId';
        $request = $this->uploadAttachmentPUTRequest($attachment_id, $body);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'uploadAttachmentPUT'
     *
     * @param  string $attachment_id The identifier of attachment that will be uploaded. (required)
     * @param  \SplFileObject $body (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function uploadAttachmentPUTRequest($attachment_id, $body)
    {
        // verify the required parameter 'attachment_id' is set
        if ($attachment_id === null || (is_array($attachment_id) && count($attachment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $attachment_id when calling uploadAttachmentPUT'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling uploadAttachmentPUT'
            );
        }

        $resourcePath = '/messaging/message-attachments/{attachmentId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // path params
        if ($attachment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'attachmentId' . '}',
                ObjectSerializer::toPathValue($attachment_id),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.allegro.public.v1+json'],
            'image/pngimage/gifimage/bmpimage/tiffimage/jpegapplication/pdf',
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('PUT', $uri, $headers, $httpBody);
    }

    /**
     * @param string $method
     * @param string|UriInterface $uri
     * @param array $headers
     * @param string|StreamInterface|null $body
     *
     * @return RequestInterface
     */
    protected function createRequest(string $method, $uri, array $headers = [], $body = null): RequestInterface
    {
        if ($this->requestFactory instanceof RequestFactory) {
            return $this->requestFactory->createRequest(
                $method,
                $uri,
                $headers,
                $body
            );
        }

        if (is_string($body) && '' !== $body && null === $this->streamFactory) {
            throw new \RuntimeException('Cannot create request: A stream factory is required to create a request with a non-empty string body.');
        }

        $request = $this->requestFactory->createRequest($method, $uri);

        foreach ($headers as $key => $value) {
            $request = $request->withHeader($key, $value);
        }

        if (null !== $body && '' !== $body) {
            $request = $request->withBody(
                is_string($body) ? $this->streamFactory->createStream($body) : $body
            );
        }

        return $request;
    }

    private function createUri(
        string $operationHost,
        string $resourcePath,
        array $queryParams
    ): UriInterface {
        $parsedUrl = parse_url($operationHost);

        $host = $parsedUrl['host'] ?? null;
        $scheme = $parsedUrl['scheme'] ?? null;
        $basePath = $parsedUrl['path'] ?? null;
        $port = $parsedUrl['port'] ?? null;
        $user = $parsedUrl['user'] ?? null;
        $password = $parsedUrl['pass'] ?? null;

        $uri = $this->uriFactory->createUri($basePath . $resourcePath)
            ->withHost($host)
            ->withScheme($scheme)
            ->withPort($port)
            ->withQuery(ObjectSerializer::buildQuery($queryParams));

        if ($user) {
            $uri = $uri->withUserInfo($user, $password);
        }

        return $uri;
    }
}
