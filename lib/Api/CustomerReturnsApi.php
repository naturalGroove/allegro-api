<?php
/**
 * CustomerReturnsApi
 * PHP version 7.2
 *
 * @category Class
 * @package  AllegroApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Allegro REST API
 *
 * https://developer.allegro.pl/about  Documentation is generated from [this](https://developer.allegro.pl/swagger.yaml) OpenAPI 3.0 specification file.
 *
 * The version of the OpenAPI document: latest
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace AllegroApi\Api;

use AllegroApi\Configuration;
use AllegroApi\DebugPlugin;
use AllegroApi\Exception\ApiException;
use AllegroApi\HeaderSelector;
use AllegroApi\ObjectSerializer;
use GuzzleHttp\Psr7\MultipartStream;
use Http\Client\Common\Plugin\ErrorPlugin;
use Http\Client\Common\Plugin\RedirectPlugin;
use Http\Client\Common\PluginClient;
use Http\Client\Common\PluginClientFactory;
use Http\Client\Exception\HttpException;
use Http\Client\HttpAsyncClient;
use Http\Discovery\HttpAsyncClientDiscovery;
use Http\Discovery\Psr17FactoryDiscovery;
use Http\Discovery\Psr18ClientDiscovery;
use Http\Message\RequestFactory;
use Http\Promise\Promise;
use Psr\Http\Client\ClientExceptionInterface;
use Psr\Http\Client\ClientInterface;
use Psr\Http\Message\RequestFactoryInterface;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\StreamFactoryInterface;
use Psr\Http\Message\UriFactoryInterface;
use Psr\Http\Message\UriInterface;

use function sprintf;

/**
 * CustomerReturnsApi Class Doc Comment
 *
 * @category Class
 * @package  AllegroApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class CustomerReturnsApi
{
    /**
     * @var PluginClient
     */
    protected $httpClient;

    /**
     * @var PluginClient
     */
    protected $httpAsyncClient;

    /**
     * @var UriFactoryInterface
     */
    protected $uriFactory;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @var RequestFactoryInterface
     */
    protected $requestFactory;

    /**
     * @var StreamFactoryInterface
     */
    protected $streamFactory;

    public function __construct(
        ClientInterface $httpClient = null,
        Configuration $config = null,
        HttpAsyncClient $httpAsyncClient = null,
        UriFactoryInterface $uriFactory = null,
        RequestFactoryInterface $requestFactory = null,
        StreamFactoryInterface $streamFactory = null,
        HeaderSelector $selector = null,
        ?array $plugins = null,
        $hostIndex = 0
    ) {
        $this->config = $config ?? (new Configuration())->setHost('https://api.allegro.pl');
        $this->requestFactory = $requestFactory ?? Psr17FactoryDiscovery::findRequestFactory();
        $this->streamFactory = $streamFactory ?? Psr17FactoryDiscovery::findStreamFactory();

        $plugins = $plugins ?? [
            new RedirectPlugin(['strict' => true]),
            new ErrorPlugin(),
        ];

        if ($this->config->getDebug()) {
            $plugins[] = new DebugPlugin(fopen($this->config->getDebugFile(), 'ab'));
        }

        $this->httpClient = (new PluginClientFactory())->createClient(
            $httpClient ?? Psr18ClientDiscovery::find(),
            $plugins
        );

        $this->httpAsyncClient = (new PluginClientFactory())->createClient(
            $httpAsyncClient ?? HttpAsyncClientDiscovery::find(),
            $plugins
        );

        $this->uriFactory = $uriFactory ?? Psr17FactoryDiscovery::findUriFactory();

        $this->headerSelector = $selector ?? new HeaderSelector();

        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getCustomerReturnById
     *
     * [BETA] Get customer return by id
     *
     * @param  string $customer_return_id Id of the customer return. (required)
     *
     *@throws \InvalidArgumentException
     * @throws \AllegroApi\Exception\ApiException on non-2xx response
     * @return \AllegroApi\Model\CustomerReturn|\AllegroApi\Model\AuthError|\AllegroApi\Model\ErrorsHolder|\AllegroApi\Model\ErrorsHolder|\AllegroApi\Model\ErrorsHolder
     */
    public function getCustomerReturnById($customer_return_id)
    {
        [$response] = $this->getCustomerReturnByIdWithHttpInfo($customer_return_id);
        return $response;
    }

    /**
     * Operation getCustomerReturnByIdWithHttpInfo
     *
     * [BETA] Get customer return by id
     *
     * @param  string $customer_return_id Id of the customer return. (required)
     *
     *@throws \InvalidArgumentException
     * @throws \AllegroApi\Exception\ApiException on non-2xx response
     * @return array of \AllegroApi\Model\CustomerReturn|\AllegroApi\Model\AuthError|\AllegroApi\Model\ErrorsHolder|\AllegroApi\Model\ErrorsHolder|\AllegroApi\Model\ErrorsHolder, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCustomerReturnByIdWithHttpInfo($customer_return_id)
    {
        $request = $this->getCustomerReturnByIdRequest($customer_return_id);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\AllegroApi\Model\CustomerReturn' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AllegroApi\Model\CustomerReturn', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\AllegroApi\Model\AuthError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AllegroApi\Model\AuthError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\AllegroApi\Model\ErrorsHolder' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AllegroApi\Model\ErrorsHolder', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\AllegroApi\Model\ErrorsHolder' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AllegroApi\Model\ErrorsHolder', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 406:
                    if ('\AllegroApi\Model\ErrorsHolder' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AllegroApi\Model\ErrorsHolder', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\AllegroApi\Model\CustomerReturn';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AllegroApi\Model\CustomerReturn',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AllegroApi\Model\AuthError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AllegroApi\Model\ErrorsHolder',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AllegroApi\Model\ErrorsHolder',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 406:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AllegroApi\Model\ErrorsHolder',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCustomerReturnByIdAsync
     *
     * [BETA] Get customer return by id
     *
     * @param  string $customer_return_id Id of the customer return. (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function getCustomerReturnByIdAsync($customer_return_id)
    {
        return $this->getCustomerReturnByIdAsyncWithHttpInfo($customer_return_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCustomerReturnByIdAsyncWithHttpInfo
     *
     * [BETA] Get customer return by id
     *
     * @param  string $customer_return_id Id of the customer return. (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function getCustomerReturnByIdAsyncWithHttpInfo($customer_return_id)
    {
        $returnType = '\AllegroApi\Model\CustomerReturn';
        $request = $this->getCustomerReturnByIdRequest($customer_return_id);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCustomerReturnById'
     *
     * @param  string $customer_return_id Id of the customer return. (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function getCustomerReturnByIdRequest($customer_return_id)
    {
        // verify the required parameter 'customer_return_id' is set
        if ($customer_return_id === null || (is_array($customer_return_id) && count($customer_return_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_return_id when calling getCustomerReturnById'
            );
        }

        $resourcePath = '/order/customer-returns/{customerReturnId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // path params
        if ($customer_return_id !== null) {
            $resourcePath = str_replace(
                '{' . 'customerReturnId' . '}',
                ObjectSerializer::toPathValue($customer_return_id),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.allegro.beta.v1+json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('GET', $uri, $headers, $httpBody);
    }

    /**
     * Operation getCustomerReturns
     *
     * [BETA] Get customer returns by provided query parameters
     *
     * @param  string $customer_return_id One or more customer return id&#39;s. (optional)
     * @param  string $order_id One or more order id&#39;s. (optional)
     * @param  string $buyer_email One or more buyer emails. (optional)
     * @param  string $buyer_login One or more buyer logins. (optional)
     * @param  string $items_offer_id One or more returned item offer id&#39;s. (optional)
     * @param  string $items_name One or more item names. (optional)
     * @param  string $parcels_waybill One or more waybill id&#39;s. (optional)
     * @param  string $parcels_carrier_id One or more carrier id&#39;s. (optional)
     * @param  string $parcels_sender_phone_number One or more phone numbers. (optional)
     * @param  string $reference_number One or more reference numbers. (optional)
     * @param  string $from The ID of the last seen customer return. Customer returns created after the given customer return will be returned. (optional)
     * @param  string $created_at_gte Date of the return in ISO 8601 format to search by greater or equal. (optional)
     * @param  string $created_at_lte Date of the return in ISO 8601 format to search by lower or equal. (optional)
     * @param  string $marketplace_id The marketplace ID where operation was made. When the parameter is omitted, searches for operations with all marketplaces. (optional)
     * @param  string $status Current return timeline statuses. The allowed values are:   * CREATED   * DISPATCHED   * IN_TRANSIT   * DELIVERED   * FINISHED   * REJECTED   * COMMISSION_REFUND_CLAIMED   * COMMISSION_REFUNDED   * WAREHOUSE_DELIVERED   * WAREHOUSE_VERIFICATION. (optional)
     * @param  int $limit Limit of customer returns per page. (optional, default to 100)
     * @param  int $offset The offset of elements in the response. (optional, default to 0)
     *
     * @throws \AllegroApi\Exception\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \AllegroApi\Model\CustomerReturnResponse|\AllegroApi\Model\AuthError|\AllegroApi\Model\ErrorsHolder|\AllegroApi\Model\ErrorsHolder
     */
    public function getCustomerReturns($customer_return_id = null, $order_id = null, $buyer_email = null, $buyer_login = null, $items_offer_id = null, $items_name = null, $parcels_waybill = null, $parcels_carrier_id = null, $parcels_sender_phone_number = null, $reference_number = null, $from = null, $created_at_gte = null, $created_at_lte = null, $marketplace_id = null, $status = null, $limit = 100, $offset = 0)
    {
        [$response] = $this->getCustomerReturnsWithHttpInfo($customer_return_id, $order_id, $buyer_email, $buyer_login, $items_offer_id, $items_name, $parcels_waybill, $parcels_carrier_id, $parcels_sender_phone_number, $reference_number, $from, $created_at_gte, $created_at_lte, $marketplace_id, $status, $limit, $offset);
        return $response;
    }

    /**
     * Operation getCustomerReturnsWithHttpInfo
     *
     * [BETA] Get customer returns by provided query parameters
     *
     * @param  string $customer_return_id One or more customer return id&#39;s. (optional)
     * @param  string $order_id One or more order id&#39;s. (optional)
     * @param  string $buyer_email One or more buyer emails. (optional)
     * @param  string $buyer_login One or more buyer logins. (optional)
     * @param  string $items_offer_id One or more returned item offer id&#39;s. (optional)
     * @param  string $items_name One or more item names. (optional)
     * @param  string $parcels_waybill One or more waybill id&#39;s. (optional)
     * @param  string $parcels_carrier_id One or more carrier id&#39;s. (optional)
     * @param  string $parcels_sender_phone_number One or more phone numbers. (optional)
     * @param  string $reference_number One or more reference numbers. (optional)
     * @param  string $from The ID of the last seen customer return. Customer returns created after the given customer return will be returned. (optional)
     * @param  string $created_at_gte Date of the return in ISO 8601 format to search by greater or equal. (optional)
     * @param  string $created_at_lte Date of the return in ISO 8601 format to search by lower or equal. (optional)
     * @param  string $marketplace_id The marketplace ID where operation was made. When the parameter is omitted, searches for operations with all marketplaces. (optional)
     * @param  string $status Current return timeline statuses. The allowed values are:   * CREATED   * DISPATCHED   * IN_TRANSIT   * DELIVERED   * FINISHED   * REJECTED   * COMMISSION_REFUND_CLAIMED   * COMMISSION_REFUNDED   * WAREHOUSE_DELIVERED   * WAREHOUSE_VERIFICATION. (optional)
     * @param  int $limit Limit of customer returns per page. (optional, default to 100)
     * @param  int $offset The offset of elements in the response. (optional, default to 0)
     *
     * @throws \AllegroApi\Exception\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \AllegroApi\Model\CustomerReturnResponse|\AllegroApi\Model\AuthError|\AllegroApi\Model\ErrorsHolder|\AllegroApi\Model\ErrorsHolder, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCustomerReturnsWithHttpInfo($customer_return_id = null, $order_id = null, $buyer_email = null, $buyer_login = null, $items_offer_id = null, $items_name = null, $parcels_waybill = null, $parcels_carrier_id = null, $parcels_sender_phone_number = null, $reference_number = null, $from = null, $created_at_gte = null, $created_at_lte = null, $marketplace_id = null, $status = null, $limit = 100, $offset = 0)
    {
        $request = $this->getCustomerReturnsRequest($customer_return_id, $order_id, $buyer_email, $buyer_login, $items_offer_id, $items_name, $parcels_waybill, $parcels_carrier_id, $parcels_sender_phone_number, $reference_number, $from, $created_at_gte, $created_at_lte, $marketplace_id, $status, $limit, $offset);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\AllegroApi\Model\CustomerReturnResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AllegroApi\Model\CustomerReturnResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\AllegroApi\Model\AuthError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AllegroApi\Model\AuthError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\AllegroApi\Model\ErrorsHolder' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AllegroApi\Model\ErrorsHolder', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 406:
                    if ('\AllegroApi\Model\ErrorsHolder' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AllegroApi\Model\ErrorsHolder', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\AllegroApi\Model\CustomerReturnResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AllegroApi\Model\CustomerReturnResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AllegroApi\Model\AuthError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AllegroApi\Model\ErrorsHolder',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 406:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AllegroApi\Model\ErrorsHolder',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCustomerReturnsAsync
     *
     * [BETA] Get customer returns by provided query parameters
     *
     * @param  string $customer_return_id One or more customer return id&#39;s. (optional)
     * @param  string $order_id One or more order id&#39;s. (optional)
     * @param  string $buyer_email One or more buyer emails. (optional)
     * @param  string $buyer_login One or more buyer logins. (optional)
     * @param  string $items_offer_id One or more returned item offer id&#39;s. (optional)
     * @param  string $items_name One or more item names. (optional)
     * @param  string $parcels_waybill One or more waybill id&#39;s. (optional)
     * @param  string $parcels_carrier_id One or more carrier id&#39;s. (optional)
     * @param  string $parcels_sender_phone_number One or more phone numbers. (optional)
     * @param  string $reference_number One or more reference numbers. (optional)
     * @param  string $from The ID of the last seen customer return. Customer returns created after the given customer return will be returned. (optional)
     * @param  string $created_at_gte Date of the return in ISO 8601 format to search by greater or equal. (optional)
     * @param  string $created_at_lte Date of the return in ISO 8601 format to search by lower or equal. (optional)
     * @param  string $marketplace_id The marketplace ID where operation was made. When the parameter is omitted, searches for operations with all marketplaces. (optional)
     * @param  string $status Current return timeline statuses. The allowed values are:   * CREATED   * DISPATCHED   * IN_TRANSIT   * DELIVERED   * FINISHED   * REJECTED   * COMMISSION_REFUND_CLAIMED   * COMMISSION_REFUNDED   * WAREHOUSE_DELIVERED   * WAREHOUSE_VERIFICATION. (optional)
     * @param  int $limit Limit of customer returns per page. (optional, default to 100)
     * @param  int $offset The offset of elements in the response. (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function getCustomerReturnsAsync($customer_return_id = null, $order_id = null, $buyer_email = null, $buyer_login = null, $items_offer_id = null, $items_name = null, $parcels_waybill = null, $parcels_carrier_id = null, $parcels_sender_phone_number = null, $reference_number = null, $from = null, $created_at_gte = null, $created_at_lte = null, $marketplace_id = null, $status = null, $limit = 100, $offset = 0)
    {
        return $this->getCustomerReturnsAsyncWithHttpInfo($customer_return_id, $order_id, $buyer_email, $buyer_login, $items_offer_id, $items_name, $parcels_waybill, $parcels_carrier_id, $parcels_sender_phone_number, $reference_number, $from, $created_at_gte, $created_at_lte, $marketplace_id, $status, $limit, $offset)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCustomerReturnsAsyncWithHttpInfo
     *
     * [BETA] Get customer returns by provided query parameters
     *
     * @param  string $customer_return_id One or more customer return id&#39;s. (optional)
     * @param  string $order_id One or more order id&#39;s. (optional)
     * @param  string $buyer_email One or more buyer emails. (optional)
     * @param  string $buyer_login One or more buyer logins. (optional)
     * @param  string $items_offer_id One or more returned item offer id&#39;s. (optional)
     * @param  string $items_name One or more item names. (optional)
     * @param  string $parcels_waybill One or more waybill id&#39;s. (optional)
     * @param  string $parcels_carrier_id One or more carrier id&#39;s. (optional)
     * @param  string $parcels_sender_phone_number One or more phone numbers. (optional)
     * @param  string $reference_number One or more reference numbers. (optional)
     * @param  string $from The ID of the last seen customer return. Customer returns created after the given customer return will be returned. (optional)
     * @param  string $created_at_gte Date of the return in ISO 8601 format to search by greater or equal. (optional)
     * @param  string $created_at_lte Date of the return in ISO 8601 format to search by lower or equal. (optional)
     * @param  string $marketplace_id The marketplace ID where operation was made. When the parameter is omitted, searches for operations with all marketplaces. (optional)
     * @param  string $status Current return timeline statuses. The allowed values are:   * CREATED   * DISPATCHED   * IN_TRANSIT   * DELIVERED   * FINISHED   * REJECTED   * COMMISSION_REFUND_CLAIMED   * COMMISSION_REFUNDED   * WAREHOUSE_DELIVERED   * WAREHOUSE_VERIFICATION. (optional)
     * @param  int $limit Limit of customer returns per page. (optional, default to 100)
     * @param  int $offset The offset of elements in the response. (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function getCustomerReturnsAsyncWithHttpInfo($customer_return_id = null, $order_id = null, $buyer_email = null, $buyer_login = null, $items_offer_id = null, $items_name = null, $parcels_waybill = null, $parcels_carrier_id = null, $parcels_sender_phone_number = null, $reference_number = null, $from = null, $created_at_gte = null, $created_at_lte = null, $marketplace_id = null, $status = null, $limit = 100, $offset = 0)
    {
        $returnType = '\AllegroApi\Model\CustomerReturnResponse';
        $request = $this->getCustomerReturnsRequest($customer_return_id, $order_id, $buyer_email, $buyer_login, $items_offer_id, $items_name, $parcels_waybill, $parcels_carrier_id, $parcels_sender_phone_number, $reference_number, $from, $created_at_gte, $created_at_lte, $marketplace_id, $status, $limit, $offset);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCustomerReturns'
     *
     * @param  string $customer_return_id One or more customer return id&#39;s. (optional)
     * @param  string $order_id One or more order id&#39;s. (optional)
     * @param  string $buyer_email One or more buyer emails. (optional)
     * @param  string $buyer_login One or more buyer logins. (optional)
     * @param  string $items_offer_id One or more returned item offer id&#39;s. (optional)
     * @param  string $items_name One or more item names. (optional)
     * @param  string $parcels_waybill One or more waybill id&#39;s. (optional)
     * @param  string $parcels_carrier_id One or more carrier id&#39;s. (optional)
     * @param  string $parcels_sender_phone_number One or more phone numbers. (optional)
     * @param  string $reference_number One or more reference numbers. (optional)
     * @param  string $from The ID of the last seen customer return. Customer returns created after the given customer return will be returned. (optional)
     * @param  string $created_at_gte Date of the return in ISO 8601 format to search by greater or equal. (optional)
     * @param  string $created_at_lte Date of the return in ISO 8601 format to search by lower or equal. (optional)
     * @param  string $marketplace_id The marketplace ID where operation was made. When the parameter is omitted, searches for operations with all marketplaces. (optional)
     * @param  string $status Current return timeline statuses. The allowed values are:   * CREATED   * DISPATCHED   * IN_TRANSIT   * DELIVERED   * FINISHED   * REJECTED   * COMMISSION_REFUND_CLAIMED   * COMMISSION_REFUNDED   * WAREHOUSE_DELIVERED   * WAREHOUSE_VERIFICATION. (optional)
     * @param  int $limit Limit of customer returns per page. (optional, default to 100)
     * @param  int $offset The offset of elements in the response. (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function getCustomerReturnsRequest($customer_return_id = null, $order_id = null, $buyer_email = null, $buyer_login = null, $items_offer_id = null, $items_name = null, $parcels_waybill = null, $parcels_carrier_id = null, $parcels_sender_phone_number = null, $reference_number = null, $from = null, $created_at_gte = null, $created_at_lte = null, $marketplace_id = null, $status = null, $limit = 100, $offset = 0)
    {
        if ($limit !== null && $limit > 1000) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling CustomerReturnsApi.getCustomerReturns, must be smaller than or equal to 1000.');
        }
        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling CustomerReturnsApi.getCustomerReturns, must be bigger than or equal to 1.');
        }

        if ($offset !== null && $offset < 0) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling CustomerReturnsApi.getCustomerReturns, must be bigger than or equal to 0.');
        }

        $resourcePath = '/order/customer-returns';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // query params
        if ($customer_return_id !== null) {
            if('form' === 'form' && is_array($customer_return_id)) {
                foreach($customer_return_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['customerReturnId'] = $customer_return_id;
            }
        }
        // query params
        if ($order_id !== null) {
            if('form' === 'form' && is_array($order_id)) {
                foreach($order_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['orderId'] = $order_id;
            }
        }
        // query params
        if ($buyer_email !== null) {
            if('form' === 'form' && is_array($buyer_email)) {
                foreach($buyer_email as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['buyer.email'] = $buyer_email;
            }
        }
        // query params
        if ($buyer_login !== null) {
            if('form' === 'form' && is_array($buyer_login)) {
                foreach($buyer_login as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['buyer.login'] = $buyer_login;
            }
        }
        // query params
        if ($items_offer_id !== null) {
            if('form' === 'form' && is_array($items_offer_id)) {
                foreach($items_offer_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['items.offerId'] = $items_offer_id;
            }
        }
        // query params
        if ($items_name !== null) {
            if('form' === 'form' && is_array($items_name)) {
                foreach($items_name as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['items.name'] = $items_name;
            }
        }
        // query params
        if ($parcels_waybill !== null) {
            if('form' === 'form' && is_array($parcels_waybill)) {
                foreach($parcels_waybill as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['parcels.waybill'] = $parcels_waybill;
            }
        }
        // query params
        if ($parcels_carrier_id !== null) {
            if('form' === 'form' && is_array($parcels_carrier_id)) {
                foreach($parcels_carrier_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['parcels.carrierId'] = $parcels_carrier_id;
            }
        }
        // query params
        if ($parcels_sender_phone_number !== null) {
            if('form' === 'form' && is_array($parcels_sender_phone_number)) {
                foreach($parcels_sender_phone_number as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['parcels.sender.phoneNumber'] = $parcels_sender_phone_number;
            }
        }
        // query params
        if ($reference_number !== null) {
            if('form' === 'form' && is_array($reference_number)) {
                foreach($reference_number as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['referenceNumber'] = $reference_number;
            }
        }
        // query params
        if ($from !== null) {
            if('form' === 'form' && is_array($from)) {
                foreach($from as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['from'] = $from;
            }
        }
        // query params
        if ($created_at_gte !== null) {
            if('form' === 'form' && is_array($created_at_gte)) {
                foreach($created_at_gte as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['createdAt.gte'] = $created_at_gte;
            }
        }
        // query params
        if ($created_at_lte !== null) {
            if('form' === 'form' && is_array($created_at_lte)) {
                foreach($created_at_lte as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['createdAt.lte'] = $created_at_lte;
            }
        }
        // query params
        if ($marketplace_id !== null) {
            if('form' === 'form' && is_array($marketplace_id)) {
                foreach($marketplace_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['marketplaceId'] = $marketplace_id;
            }
        }
        // query params
        if ($status !== null) {
            if('form' === 'form' && is_array($status)) {
                foreach($status as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['status'] = $status;
            }
        }
        // query params
        if ($limit !== null) {
            if('form' === 'form' && is_array($limit)) {
                foreach($limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['limit'] = $limit;
            }
        }
        // query params
        if ($offset !== null) {
            if('form' === 'form' && is_array($offset)) {
                foreach($offset as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['offset'] = $offset;
            }
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.allegro.beta.v1+json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('GET', $uri, $headers, $httpBody);
    }

    /**
     * Operation rejectCustomerReturnRefund
     *
     * [BETA] Reject customer return refund
     *
     * @param  string $customer_return_id Id of the customer return. (required)
     * @param  \AllegroApi\Model\CustomerReturnRefundRejectionRequest $customer_return_refund_rejection_request customer_return_refund_rejection_request (required)
     *
     *@throws \InvalidArgumentException
     * @throws \AllegroApi\Exception\ApiException on non-2xx response
     * @return \AllegroApi\Model\CustomerReturn|\AllegroApi\Model\AuthError|\AllegroApi\Model\ErrorsHolder|\AllegroApi\Model\ErrorsHolder|\AllegroApi\Model\ErrorsHolder
     */
    public function rejectCustomerReturnRefund($customer_return_id, $customer_return_refund_rejection_request)
    {
        [$response] = $this->rejectCustomerReturnRefundWithHttpInfo($customer_return_id, $customer_return_refund_rejection_request);
        return $response;
    }

    /**
     * Operation rejectCustomerReturnRefundWithHttpInfo
     *
     * [BETA] Reject customer return refund
     *
     * @param  string $customer_return_id Id of the customer return. (required)
     * @param  \AllegroApi\Model\CustomerReturnRefundRejectionRequest $customer_return_refund_rejection_request (required)
     *
     *@throws \InvalidArgumentException
     * @throws \AllegroApi\Exception\ApiException on non-2xx response
     * @return array of \AllegroApi\Model\CustomerReturn|\AllegroApi\Model\AuthError|\AllegroApi\Model\ErrorsHolder|\AllegroApi\Model\ErrorsHolder|\AllegroApi\Model\ErrorsHolder, HTTP status code, HTTP response headers (array of strings)
     */
    public function rejectCustomerReturnRefundWithHttpInfo($customer_return_id, $customer_return_refund_rejection_request)
    {
        $request = $this->rejectCustomerReturnRefundRequest($customer_return_id, $customer_return_refund_rejection_request);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\AllegroApi\Model\CustomerReturn' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AllegroApi\Model\CustomerReturn', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\AllegroApi\Model\AuthError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AllegroApi\Model\AuthError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\AllegroApi\Model\ErrorsHolder' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AllegroApi\Model\ErrorsHolder', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 406:
                    if ('\AllegroApi\Model\ErrorsHolder' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AllegroApi\Model\ErrorsHolder', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\AllegroApi\Model\ErrorsHolder' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AllegroApi\Model\ErrorsHolder', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\AllegroApi\Model\CustomerReturn';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AllegroApi\Model\CustomerReturn',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AllegroApi\Model\AuthError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AllegroApi\Model\ErrorsHolder',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 406:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AllegroApi\Model\ErrorsHolder',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AllegroApi\Model\ErrorsHolder',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation rejectCustomerReturnRefundAsync
     *
     * [BETA] Reject customer return refund
     *
     * @param  string $customer_return_id Id of the customer return. (required)
     * @param  \AllegroApi\Model\CustomerReturnRefundRejectionRequest $customer_return_refund_rejection_request (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function rejectCustomerReturnRefundAsync($customer_return_id, $customer_return_refund_rejection_request)
    {
        return $this->rejectCustomerReturnRefundAsyncWithHttpInfo($customer_return_id, $customer_return_refund_rejection_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation rejectCustomerReturnRefundAsyncWithHttpInfo
     *
     * [BETA] Reject customer return refund
     *
     * @param  string $customer_return_id Id of the customer return. (required)
     * @param  \AllegroApi\Model\CustomerReturnRefundRejectionRequest $customer_return_refund_rejection_request (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function rejectCustomerReturnRefundAsyncWithHttpInfo($customer_return_id, $customer_return_refund_rejection_request)
    {
        $returnType = '\AllegroApi\Model\CustomerReturn';
        $request = $this->rejectCustomerReturnRefundRequest($customer_return_id, $customer_return_refund_rejection_request);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'rejectCustomerReturnRefund'
     *
     * @param  string $customer_return_id Id of the customer return. (required)
     * @param  \AllegroApi\Model\CustomerReturnRefundRejectionRequest $customer_return_refund_rejection_request (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function rejectCustomerReturnRefundRequest($customer_return_id, $customer_return_refund_rejection_request)
    {
        // verify the required parameter 'customer_return_id' is set
        if ($customer_return_id === null || (is_array($customer_return_id) && count($customer_return_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_return_id when calling rejectCustomerReturnRefund'
            );
        }
        // verify the required parameter 'customer_return_refund_rejection_request' is set
        if ($customer_return_refund_rejection_request === null || (is_array($customer_return_refund_rejection_request) && count($customer_return_refund_rejection_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_return_refund_rejection_request when calling rejectCustomerReturnRefund'
            );
        }

        $resourcePath = '/order/customer-returns/{customerReturnId}/rejection';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // path params
        if ($customer_return_id !== null) {
            $resourcePath = str_replace(
                '{' . 'customerReturnId' . '}',
                ObjectSerializer::toPathValue($customer_return_id),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.allegro.beta.v1+json'],
            'application/vnd.allegro.beta.v1+json',
            $multipart
        );

        // for model (json/xml)
        if (isset($customer_return_refund_rejection_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($customer_return_refund_rejection_request));
            } else {
                $httpBody = $customer_return_refund_rejection_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('POST', $uri, $headers, $httpBody);
    }

    /**
     * @param string $method
     * @param string|UriInterface $uri
     * @param array $headers
     * @param string|StreamInterface|null $body
     *
     * @return RequestInterface
     */
    protected function createRequest(string $method, $uri, array $headers = [], $body = null): RequestInterface
    {
        if ($this->requestFactory instanceof RequestFactory) {
            return $this->requestFactory->createRequest(
                $method,
                $uri,
                $headers,
                $body
            );
        }

        if (is_string($body) && '' !== $body && null === $this->streamFactory) {
            throw new \RuntimeException('Cannot create request: A stream factory is required to create a request with a non-empty string body.');
        }

        $request = $this->requestFactory->createRequest($method, $uri);

        foreach ($headers as $key => $value) {
            $request = $request->withHeader($key, $value);
        }

        if (null !== $body && '' !== $body) {
            $request = $request->withBody(
                is_string($body) ? $this->streamFactory->createStream($body) : $body
            );
        }

        return $request;
    }

    private function createUri(
        string $operationHost,
        string $resourcePath,
        array $queryParams
    ): UriInterface {
        $parsedUrl = parse_url($operationHost);

        $host = $parsedUrl['host'] ?? null;
        $scheme = $parsedUrl['scheme'] ?? null;
        $basePath = $parsedUrl['path'] ?? null;
        $port = $parsedUrl['port'] ?? null;
        $user = $parsedUrl['user'] ?? null;
        $password = $parsedUrl['pass'] ?? null;

        $uri = $this->uriFactory->createUri($basePath . $resourcePath)
            ->withHost($host)
            ->withScheme($scheme)
            ->withPort($port)
            ->withQuery(ObjectSerializer::buildQuery($queryParams));

        if ($user) {
            $uri = $uri->withUserInfo($user, $password);
        }

        return $uri;
    }
}
