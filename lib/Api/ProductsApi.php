<?php
/**
 * ProductsApi
 * PHP version 7.2
 *
 * @category Class
 * @package  AllegroApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Allegro REST API
 *
 * https://developer.allegro.pl/about  Documentation is generated from [this](https://developer.allegro.pl/swagger.yaml) OpenAPI 3.0 specification file.
 *
 * The version of the OpenAPI document: latest
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace AllegroApi\Api;

use AllegroApi\Configuration;
use AllegroApi\DebugPlugin;
use AllegroApi\Exception\ApiException;
use AllegroApi\HeaderSelector;
use AllegroApi\ObjectSerializer;
use GuzzleHttp\Psr7\MultipartStream;
use Http\Client\Common\Plugin\ErrorPlugin;
use Http\Client\Common\Plugin\RedirectPlugin;
use Http\Client\Common\PluginClient;
use Http\Client\Common\PluginClientFactory;
use Http\Client\Exception\HttpException;
use Http\Client\HttpAsyncClient;
use Http\Discovery\HttpAsyncClientDiscovery;
use Http\Discovery\Psr17FactoryDiscovery;
use Http\Discovery\Psr18ClientDiscovery;
use Http\Message\RequestFactory;
use Http\Promise\Promise;
use Psr\Http\Client\ClientExceptionInterface;
use Psr\Http\Client\ClientInterface;
use Psr\Http\Message\RequestFactoryInterface;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\StreamFactoryInterface;
use Psr\Http\Message\UriFactoryInterface;
use Psr\Http\Message\UriInterface;

use function sprintf;

/**
 * ProductsApi Class Doc Comment
 *
 * @category Class
 * @package  AllegroApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ProductsApi
{
    /**
     * @var PluginClient
     */
    protected $httpClient;

    /**
     * @var PluginClient
     */
    protected $httpAsyncClient;

    /**
     * @var UriFactoryInterface
     */
    protected $uriFactory;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @var RequestFactoryInterface
     */
    protected $requestFactory;

    /**
     * @var StreamFactoryInterface
     */
    protected $streamFactory;

    public function __construct(
        ClientInterface $httpClient = null,
        Configuration $config = null,
        HttpAsyncClient $httpAsyncClient = null,
        UriFactoryInterface $uriFactory = null,
        RequestFactoryInterface $requestFactory = null,
        StreamFactoryInterface $streamFactory = null,
        HeaderSelector $selector = null,
        ?array $plugins = null,
        $hostIndex = 0
    ) {
        $this->config = $config ?? (new Configuration())->setHost('https://api.allegro.pl');
        $this->requestFactory = $requestFactory ?? Psr17FactoryDiscovery::findRequestFactory();
        $this->streamFactory = $streamFactory ?? Psr17FactoryDiscovery::findStreamFactory();

        $plugins = $plugins ?? [
            new RedirectPlugin(['strict' => true]),
            new ErrorPlugin(),
        ];

        if ($this->config->getDebug()) {
            $plugins[] = new DebugPlugin(fopen($this->config->getDebugFile(), 'ab'));
        }

        $this->httpClient = (new PluginClientFactory())->createClient(
            $httpClient ?? Psr18ClientDiscovery::find(),
            $plugins
        );

        $this->httpAsyncClient = (new PluginClientFactory())->createClient(
            $httpAsyncClient ?? HttpAsyncClientDiscovery::find(),
            $plugins
        );

        $this->uriFactory = $uriFactory ?? Psr17FactoryDiscovery::findUriFactory();

        $this->headerSelector = $selector ?? new HeaderSelector();

        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getFlatProductParametersUsingGET
     *
     * Get product parameters available in given category
     *
     * @param  string $category_id The category ID. (required)
     *
     *@throws \InvalidArgumentException
     * @throws \AllegroApi\Exception\ApiException on non-2xx response
     * @return \AllegroApi\Model\CategoryProductParameterList|\AllegroApi\Model\ErrorsHolder
     */
    public function getFlatProductParametersUsingGET($category_id)
    {
        [$response] = $this->getFlatProductParametersUsingGETWithHttpInfo($category_id);
        return $response;
    }

    /**
     * Operation getFlatProductParametersUsingGETWithHttpInfo
     *
     * Get product parameters available in given category
     *
     * @param  string $category_id The category ID. (required)
     *
     *@throws \InvalidArgumentException
     * @throws \AllegroApi\Exception\ApiException on non-2xx response
     * @return array of \AllegroApi\Model\CategoryProductParameterList|\AllegroApi\Model\ErrorsHolder, HTTP status code, HTTP response headers (array of strings)
     */
    public function getFlatProductParametersUsingGETWithHttpInfo($category_id)
    {
        $request = $this->getFlatProductParametersUsingGETRequest($category_id);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\AllegroApi\Model\CategoryProductParameterList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AllegroApi\Model\CategoryProductParameterList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\AllegroApi\Model\ErrorsHolder' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AllegroApi\Model\ErrorsHolder', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\AllegroApi\Model\CategoryProductParameterList';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AllegroApi\Model\CategoryProductParameterList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AllegroApi\Model\ErrorsHolder',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getFlatProductParametersUsingGETAsync
     *
     * Get product parameters available in given category
     *
     * @param  string $category_id The category ID. (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function getFlatProductParametersUsingGETAsync($category_id)
    {
        return $this->getFlatProductParametersUsingGETAsyncWithHttpInfo($category_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getFlatProductParametersUsingGETAsyncWithHttpInfo
     *
     * Get product parameters available in given category
     *
     * @param  string $category_id The category ID. (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function getFlatProductParametersUsingGETAsyncWithHttpInfo($category_id)
    {
        $returnType = '\AllegroApi\Model\CategoryProductParameterList';
        $request = $this->getFlatProductParametersUsingGETRequest($category_id);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'getFlatProductParametersUsingGET'
     *
     * @param  string $category_id The category ID. (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function getFlatProductParametersUsingGETRequest($category_id)
    {
        // verify the required parameter 'category_id' is set
        if ($category_id === null || (is_array($category_id) && count($category_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $category_id when calling getFlatProductParametersUsingGET'
            );
        }

        $resourcePath = '/sale/categories/{categoryId}/product-parameters';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // path params
        if ($category_id !== null) {
            $resourcePath = str_replace(
                '{' . 'categoryId' . '}',
                ObjectSerializer::toPathValue($category_id),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.allegro.public.v1+json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('GET', $uri, $headers, $httpBody);
    }

    /**
     * Operation getProductChangeProposal
     *
     * Get all data of the particular product changes proposal
     *
     * @param  string $change_proposal_id The product changes proposal identifier. (required)
     * @param  string $accept_language Expected language of messages. (optional, default to 'en-US')
     *
     *@throws \InvalidArgumentException
     * @throws \AllegroApi\Exception\ApiException on non-2xx response
     * @return \AllegroApi\Model\ProductChangeProposalDto|\AllegroApi\Model\AuthError|\AllegroApi\Model\ErrorsHolder|\AllegroApi\Model\ErrorsHolder
     */
    public function getProductChangeProposal($change_proposal_id, $accept_language = 'en-US')
    {
        [$response] = $this->getProductChangeProposalWithHttpInfo($change_proposal_id, $accept_language);
        return $response;
    }

    /**
     * Operation getProductChangeProposalWithHttpInfo
     *
     * Get all data of the particular product changes proposal
     *
     * @param  string $change_proposal_id The product changes proposal identifier. (required)
     * @param  string $accept_language Expected language of messages. (optional, default to 'en-US')
     *
     *@throws \InvalidArgumentException
     * @throws \AllegroApi\Exception\ApiException on non-2xx response
     * @return array of \AllegroApi\Model\ProductChangeProposalDto|\AllegroApi\Model\AuthError|\AllegroApi\Model\ErrorsHolder|\AllegroApi\Model\ErrorsHolder, HTTP status code, HTTP response headers (array of strings)
     */
    public function getProductChangeProposalWithHttpInfo($change_proposal_id, $accept_language = 'en-US')
    {
        $request = $this->getProductChangeProposalRequest($change_proposal_id, $accept_language);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\AllegroApi\Model\ProductChangeProposalDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AllegroApi\Model\ProductChangeProposalDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\AllegroApi\Model\AuthError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AllegroApi\Model\AuthError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\AllegroApi\Model\ErrorsHolder' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AllegroApi\Model\ErrorsHolder', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\AllegroApi\Model\ErrorsHolder' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AllegroApi\Model\ErrorsHolder', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\AllegroApi\Model\ProductChangeProposalDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AllegroApi\Model\ProductChangeProposalDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AllegroApi\Model\AuthError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AllegroApi\Model\ErrorsHolder',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AllegroApi\Model\ErrorsHolder',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getProductChangeProposalAsync
     *
     * Get all data of the particular product changes proposal
     *
     * @param  string $change_proposal_id The product changes proposal identifier. (required)
     * @param  string $accept_language Expected language of messages. (optional, default to 'en-US')
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function getProductChangeProposalAsync($change_proposal_id, $accept_language = 'en-US')
    {
        return $this->getProductChangeProposalAsyncWithHttpInfo($change_proposal_id, $accept_language)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getProductChangeProposalAsyncWithHttpInfo
     *
     * Get all data of the particular product changes proposal
     *
     * @param  string $change_proposal_id The product changes proposal identifier. (required)
     * @param  string $accept_language Expected language of messages. (optional, default to 'en-US')
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function getProductChangeProposalAsyncWithHttpInfo($change_proposal_id, $accept_language = 'en-US')
    {
        $returnType = '\AllegroApi\Model\ProductChangeProposalDto';
        $request = $this->getProductChangeProposalRequest($change_proposal_id, $accept_language);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'getProductChangeProposal'
     *
     * @param  string $change_proposal_id The product changes proposal identifier. (required)
     * @param  string $accept_language Expected language of messages. (optional, default to 'en-US')
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function getProductChangeProposalRequest($change_proposal_id, $accept_language = 'en-US')
    {
        // verify the required parameter 'change_proposal_id' is set
        if ($change_proposal_id === null || (is_array($change_proposal_id) && count($change_proposal_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $change_proposal_id when calling getProductChangeProposal'
            );
        }

        $resourcePath = '/sale/products/change-proposals/{changeProposalId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = ObjectSerializer::toHeaderValue($accept_language);
        }

        // path params
        if ($change_proposal_id !== null) {
            $resourcePath = str_replace(
                '{' . 'changeProposalId' . '}',
                ObjectSerializer::toPathValue($change_proposal_id),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.allegro.public.v1+json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('GET', $uri, $headers, $httpBody);
    }

    /**
     * Operation getSaleProduct
     *
     * Get all data of the particular product
     *
     * @param  string $product_id The product identifier. (required)
     * @param  string $category_id The similar category identifier. You can choose a category from &#39;similar categories&#39; to filter the list of parameters available in the category context. (optional)
     * @param  bool $include_drafts Return also if product is in draft state. (optional)
     * @param  string $language The language version of product. You can indicate the language for the returned product data. At present we support: \&quot;pl-PL\&quot;, \&quot;cs-CZ\&quot;, \&quot;en-US\&quot; and \&quot;uk-UA\&quot;. (optional)
     *
     *@throws \InvalidArgumentException
     * @throws \AllegroApi\Exception\ApiException on non-2xx response
     * @return \AllegroApi\Model\SaleProductDto|\AllegroApi\Model\AuthError|\AllegroApi\Model\ErrorsHolder|\AllegroApi\Model\ErrorsHolder
     */
    public function getSaleProduct($product_id, $category_id = null, $include_drafts = null, $language = null)
    {
        [$response] = $this->getSaleProductWithHttpInfo($product_id, $category_id, $include_drafts, $language);
        return $response;
    }

    /**
     * Operation getSaleProductWithHttpInfo
     *
     * Get all data of the particular product
     *
     * @param  string $product_id The product identifier. (required)
     * @param  string $category_id The similar category identifier. You can choose a category from &#39;similar categories&#39; to filter the list of parameters available in the category context. (optional)
     * @param  bool $include_drafts Return also if product is in draft state. (optional)
     * @param  string $language The language version of product. You can indicate the language for the returned product data. At present we support: \&quot;pl-PL\&quot;, \&quot;cs-CZ\&quot;, \&quot;en-US\&quot; and \&quot;uk-UA\&quot;. (optional)
     *
     *@throws \InvalidArgumentException
     * @throws \AllegroApi\Exception\ApiException on non-2xx response
     * @return array of \AllegroApi\Model\SaleProductDto|\AllegroApi\Model\AuthError|\AllegroApi\Model\ErrorsHolder|\AllegroApi\Model\ErrorsHolder, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSaleProductWithHttpInfo($product_id, $category_id = null, $include_drafts = null, $language = null)
    {
        $request = $this->getSaleProductRequest($product_id, $category_id, $include_drafts, $language);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\AllegroApi\Model\SaleProductDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AllegroApi\Model\SaleProductDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\AllegroApi\Model\AuthError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AllegroApi\Model\AuthError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\AllegroApi\Model\ErrorsHolder' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AllegroApi\Model\ErrorsHolder', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\AllegroApi\Model\ErrorsHolder' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AllegroApi\Model\ErrorsHolder', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\AllegroApi\Model\SaleProductDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AllegroApi\Model\SaleProductDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AllegroApi\Model\AuthError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AllegroApi\Model\ErrorsHolder',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AllegroApi\Model\ErrorsHolder',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSaleProductAsync
     *
     * Get all data of the particular product
     *
     * @param  string $product_id The product identifier. (required)
     * @param  string $category_id The similar category identifier. You can choose a category from &#39;similar categories&#39; to filter the list of parameters available in the category context. (optional)
     * @param  bool $include_drafts Return also if product is in draft state. (optional)
     * @param  string $language The language version of product. You can indicate the language for the returned product data. At present we support: \&quot;pl-PL\&quot;, \&quot;cs-CZ\&quot;, \&quot;en-US\&quot; and \&quot;uk-UA\&quot;. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function getSaleProductAsync($product_id, $category_id = null, $include_drafts = null, $language = null)
    {
        return $this->getSaleProductAsyncWithHttpInfo($product_id, $category_id, $include_drafts, $language)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSaleProductAsyncWithHttpInfo
     *
     * Get all data of the particular product
     *
     * @param  string $product_id The product identifier. (required)
     * @param  string $category_id The similar category identifier. You can choose a category from &#39;similar categories&#39; to filter the list of parameters available in the category context. (optional)
     * @param  bool $include_drafts Return also if product is in draft state. (optional)
     * @param  string $language The language version of product. You can indicate the language for the returned product data. At present we support: \&quot;pl-PL\&quot;, \&quot;cs-CZ\&quot;, \&quot;en-US\&quot; and \&quot;uk-UA\&quot;. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function getSaleProductAsyncWithHttpInfo($product_id, $category_id = null, $include_drafts = null, $language = null)
    {
        $returnType = '\AllegroApi\Model\SaleProductDto';
        $request = $this->getSaleProductRequest($product_id, $category_id, $include_drafts, $language);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSaleProduct'
     *
     * @param  string $product_id The product identifier. (required)
     * @param  string $category_id The similar category identifier. You can choose a category from &#39;similar categories&#39; to filter the list of parameters available in the category context. (optional)
     * @param  bool $include_drafts Return also if product is in draft state. (optional)
     * @param  string $language The language version of product. You can indicate the language for the returned product data. At present we support: \&quot;pl-PL\&quot;, \&quot;cs-CZ\&quot;, \&quot;en-US\&quot; and \&quot;uk-UA\&quot;. (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function getSaleProductRequest($product_id, $category_id = null, $include_drafts = null, $language = null)
    {
        // verify the required parameter 'product_id' is set
        if ($product_id === null || (is_array($product_id) && count($product_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product_id when calling getSaleProduct'
            );
        }

        $resourcePath = '/sale/products/{productId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // query params
        if ($category_id !== null) {
            if('form' === 'form' && is_array($category_id)) {
                foreach($category_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['category.id'] = $category_id;
            }
        }
        // query params
        if ($include_drafts !== null) {
            if('form' === 'form' && is_array($include_drafts)) {
                foreach($include_drafts as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['includeDrafts'] = $include_drafts;
            }
        }
        // query params
        if ($language !== null) {
            if('form' === 'form' && is_array($language)) {
                foreach($language as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['language'] = $language;
            }
        }

        // path params
        if ($product_id !== null) {
            $resourcePath = str_replace(
                '{' . 'productId' . '}',
                ObjectSerializer::toPathValue($product_id),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.allegro.public.v1+json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('GET', $uri, $headers, $httpBody);
    }

    /**
     * Operation getSaleProducts
     *
     * Get search products results
     *
     * @param  string $ean The EAN values can include EAN, ISBN, and UPC identifier types. Parameter is depracated and will be removed in the future. Please use combination of phrase and mode (&#x60;GTIN&#x60;) parameters instead. (optional)
     * @param  string $phrase Search phrase. (optional)
     * @param  string $mode Search mode. If not specified, we are searching by GTIN, MPN, product&#39;s name, parameters, etc.  - &#x60;GTIN&#x60; - restricts the search filtering to GTINs (Global Trade Item Number), e.g. EAN, ISBN, UPC.  - &#x60;MPN&#x60; - restricts the search filtering to MPNs (Manufacturer Part Number). (optional)
     * @param  string $language Language indicates the language for searching products. Allows to specify the language of the given phrase. At present we support: \&quot;pl-PL\&quot; and \&quot;cs-CZ\&quot;. (optional)
     * @param  string $category_id The category identifier to filter results. This can only be used when searching by phrase. (optional)
     * @param  array<string,string> $dynamic_filters You can filter and customize your search results to find exactly what you need by applying filters ids and their dictionary values to query according to the flowing pattern: id&#x3D;value. When the filter definition looks like:   &#x60;&#x60;&#x60;&#x60;   {     \&quot;id\&quot;: \&quot;127448\&quot;,     \&quot;name\&quot;: \&quot;Kolor\&quot;,     \&quot;type\&quot;: \&quot;SINGLE\&quot;,     \&quot;values\&quot;: [       {         \&quot;name\&quot;: \&quot;biały\&quot;,         \&quot;value\&quot;: \&quot;2\&quot;       },       {         \&quot;name\&quot;: \&quot;czarny\&quot;,         \&quot;value\&quot;: \&quot;1\&quot; }     ]   }   &#x60;&#x60;&#x60;&#x60; You can use &#39;Kolor&#39; filter to query results, i.e.:   * &#x60;127448&#x3D;2&#x60; for \&quot;biały\&quot;   * &#x60;127448&#x3D;1&#x60; for \&quot;czarny\&quot;. (optional)
     * @param  string $page_id A \&quot;cursor\&quot; to the next set of results. (optional)
     * @param  string $search_features Enables additional search options: - *SIMILAR_CATEGORIES* - searching in the indicated category (category.id) and in &#39;similar categories&#39; (works only if category.id is a leaf category). (optional)
     * @param  bool $include_drafts Include products in draft state. (optional)
     *
     * @throws \AllegroApi\Exception\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \AllegroApi\Model\GetSaleProductsResponse|\AllegroApi\Model\AuthError|\AllegroApi\Model\ErrorsHolder
     */
    public function getSaleProducts($ean = null, $phrase = null, $mode = null, $language = null, $category_id = null, $dynamic_filters = null, $page_id = null, $search_features = null, $include_drafts = null)
    {
        [$response] = $this->getSaleProductsWithHttpInfo($ean, $phrase, $mode, $language, $category_id, $dynamic_filters, $page_id, $search_features, $include_drafts);
        return $response;
    }

    /**
     * Operation getSaleProductsWithHttpInfo
     *
     * Get search products results
     *
     * @param  string $ean The EAN values can include EAN, ISBN, and UPC identifier types. Parameter is depracated and will be removed in the future. Please use combination of phrase and mode (&#x60;GTIN&#x60;) parameters instead. (optional)
     * @param  string $phrase Search phrase. (optional)
     * @param  string $mode Search mode. If not specified, we are searching by GTIN, MPN, product&#39;s name, parameters, etc.  - &#x60;GTIN&#x60; - restricts the search filtering to GTINs (Global Trade Item Number), e.g. EAN, ISBN, UPC.  - &#x60;MPN&#x60; - restricts the search filtering to MPNs (Manufacturer Part Number). (optional)
     * @param  string $language Language indicates the language for searching products. Allows to specify the language of the given phrase. At present we support: \&quot;pl-PL\&quot; and \&quot;cs-CZ\&quot;. (optional)
     * @param  string $category_id The category identifier to filter results. This can only be used when searching by phrase. (optional)
     * @param  array<string,string> $dynamic_filters You can filter and customize your search results to find exactly what you need by applying filters ids and their dictionary values to query according to the flowing pattern: id&#x3D;value. When the filter definition looks like:   &#x60;&#x60;&#x60;&#x60;   {     \&quot;id\&quot;: \&quot;127448\&quot;,     \&quot;name\&quot;: \&quot;Kolor\&quot;,     \&quot;type\&quot;: \&quot;SINGLE\&quot;,     \&quot;values\&quot;: [       {         \&quot;name\&quot;: \&quot;biały\&quot;,         \&quot;value\&quot;: \&quot;2\&quot;       },       {         \&quot;name\&quot;: \&quot;czarny\&quot;,         \&quot;value\&quot;: \&quot;1\&quot; }     ]   }   &#x60;&#x60;&#x60;&#x60; You can use &#39;Kolor&#39; filter to query results, i.e.:   * &#x60;127448&#x3D;2&#x60; for \&quot;biały\&quot;   * &#x60;127448&#x3D;1&#x60; for \&quot;czarny\&quot;. (optional)
     * @param  string $page_id A \&quot;cursor\&quot; to the next set of results. (optional)
     * @param  string $search_features Enables additional search options: - *SIMILAR_CATEGORIES* - searching in the indicated category (category.id) and in &#39;similar categories&#39; (works only if category.id is a leaf category). (optional)
     * @param  bool $include_drafts Include products in draft state. (optional)
     *
     * @throws \AllegroApi\Exception\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \AllegroApi\Model\GetSaleProductsResponse|\AllegroApi\Model\AuthError|\AllegroApi\Model\ErrorsHolder, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSaleProductsWithHttpInfo($ean = null, $phrase = null, $mode = null, $language = null, $category_id = null, $dynamic_filters = null, $page_id = null, $search_features = null, $include_drafts = null)
    {
        $request = $this->getSaleProductsRequest($ean, $phrase, $mode, $language, $category_id, $dynamic_filters, $page_id, $search_features, $include_drafts);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\AllegroApi\Model\GetSaleProductsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AllegroApi\Model\GetSaleProductsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\AllegroApi\Model\AuthError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AllegroApi\Model\AuthError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\AllegroApi\Model\ErrorsHolder' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AllegroApi\Model\ErrorsHolder', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\AllegroApi\Model\GetSaleProductsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AllegroApi\Model\GetSaleProductsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AllegroApi\Model\AuthError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AllegroApi\Model\ErrorsHolder',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSaleProductsAsync
     *
     * Get search products results
     *
     * @param  string $ean The EAN values can include EAN, ISBN, and UPC identifier types. Parameter is depracated and will be removed in the future. Please use combination of phrase and mode (&#x60;GTIN&#x60;) parameters instead. (optional)
     * @param  string $phrase Search phrase. (optional)
     * @param  string $mode Search mode. If not specified, we are searching by GTIN, MPN, product&#39;s name, parameters, etc.  - &#x60;GTIN&#x60; - restricts the search filtering to GTINs (Global Trade Item Number), e.g. EAN, ISBN, UPC.  - &#x60;MPN&#x60; - restricts the search filtering to MPNs (Manufacturer Part Number). (optional)
     * @param  string $language Language indicates the language for searching products. Allows to specify the language of the given phrase. At present we support: \&quot;pl-PL\&quot; and \&quot;cs-CZ\&quot;. (optional)
     * @param  string $category_id The category identifier to filter results. This can only be used when searching by phrase. (optional)
     * @param  array<string,string> $dynamic_filters You can filter and customize your search results to find exactly what you need by applying filters ids and their dictionary values to query according to the flowing pattern: id&#x3D;value. When the filter definition looks like:   &#x60;&#x60;&#x60;&#x60;   {     \&quot;id\&quot;: \&quot;127448\&quot;,     \&quot;name\&quot;: \&quot;Kolor\&quot;,     \&quot;type\&quot;: \&quot;SINGLE\&quot;,     \&quot;values\&quot;: [       {         \&quot;name\&quot;: \&quot;biały\&quot;,         \&quot;value\&quot;: \&quot;2\&quot;       },       {         \&quot;name\&quot;: \&quot;czarny\&quot;,         \&quot;value\&quot;: \&quot;1\&quot; }     ]   }   &#x60;&#x60;&#x60;&#x60; You can use &#39;Kolor&#39; filter to query results, i.e.:   * &#x60;127448&#x3D;2&#x60; for \&quot;biały\&quot;   * &#x60;127448&#x3D;1&#x60; for \&quot;czarny\&quot;. (optional)
     * @param  string $page_id A \&quot;cursor\&quot; to the next set of results. (optional)
     * @param  string $search_features Enables additional search options: - *SIMILAR_CATEGORIES* - searching in the indicated category (category.id) and in &#39;similar categories&#39; (works only if category.id is a leaf category). (optional)
     * @param  bool $include_drafts Include products in draft state. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function getSaleProductsAsync($ean = null, $phrase = null, $mode = null, $language = null, $category_id = null, $dynamic_filters = null, $page_id = null, $search_features = null, $include_drafts = null)
    {
        return $this->getSaleProductsAsyncWithHttpInfo($ean, $phrase, $mode, $language, $category_id, $dynamic_filters, $page_id, $search_features, $include_drafts)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSaleProductsAsyncWithHttpInfo
     *
     * Get search products results
     *
     * @param  string $ean The EAN values can include EAN, ISBN, and UPC identifier types. Parameter is depracated and will be removed in the future. Please use combination of phrase and mode (&#x60;GTIN&#x60;) parameters instead. (optional)
     * @param  string $phrase Search phrase. (optional)
     * @param  string $mode Search mode. If not specified, we are searching by GTIN, MPN, product&#39;s name, parameters, etc.  - &#x60;GTIN&#x60; - restricts the search filtering to GTINs (Global Trade Item Number), e.g. EAN, ISBN, UPC.  - &#x60;MPN&#x60; - restricts the search filtering to MPNs (Manufacturer Part Number). (optional)
     * @param  string $language Language indicates the language for searching products. Allows to specify the language of the given phrase. At present we support: \&quot;pl-PL\&quot; and \&quot;cs-CZ\&quot;. (optional)
     * @param  string $category_id The category identifier to filter results. This can only be used when searching by phrase. (optional)
     * @param  array<string,string> $dynamic_filters You can filter and customize your search results to find exactly what you need by applying filters ids and their dictionary values to query according to the flowing pattern: id&#x3D;value. When the filter definition looks like:   &#x60;&#x60;&#x60;&#x60;   {     \&quot;id\&quot;: \&quot;127448\&quot;,     \&quot;name\&quot;: \&quot;Kolor\&quot;,     \&quot;type\&quot;: \&quot;SINGLE\&quot;,     \&quot;values\&quot;: [       {         \&quot;name\&quot;: \&quot;biały\&quot;,         \&quot;value\&quot;: \&quot;2\&quot;       },       {         \&quot;name\&quot;: \&quot;czarny\&quot;,         \&quot;value\&quot;: \&quot;1\&quot; }     ]   }   &#x60;&#x60;&#x60;&#x60; You can use &#39;Kolor&#39; filter to query results, i.e.:   * &#x60;127448&#x3D;2&#x60; for \&quot;biały\&quot;   * &#x60;127448&#x3D;1&#x60; for \&quot;czarny\&quot;. (optional)
     * @param  string $page_id A \&quot;cursor\&quot; to the next set of results. (optional)
     * @param  string $search_features Enables additional search options: - *SIMILAR_CATEGORIES* - searching in the indicated category (category.id) and in &#39;similar categories&#39; (works only if category.id is a leaf category). (optional)
     * @param  bool $include_drafts Include products in draft state. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function getSaleProductsAsyncWithHttpInfo($ean = null, $phrase = null, $mode = null, $language = null, $category_id = null, $dynamic_filters = null, $page_id = null, $search_features = null, $include_drafts = null)
    {
        $returnType = '\AllegroApi\Model\GetSaleProductsResponse';
        $request = $this->getSaleProductsRequest($ean, $phrase, $mode, $language, $category_id, $dynamic_filters, $page_id, $search_features, $include_drafts);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSaleProducts'
     *
     * @param  string $ean The EAN values can include EAN, ISBN, and UPC identifier types. Parameter is depracated and will be removed in the future. Please use combination of phrase and mode (&#x60;GTIN&#x60;) parameters instead. (optional)
     * @param  string $phrase Search phrase. (optional)
     * @param  string $mode Search mode. If not specified, we are searching by GTIN, MPN, product&#39;s name, parameters, etc.  - &#x60;GTIN&#x60; - restricts the search filtering to GTINs (Global Trade Item Number), e.g. EAN, ISBN, UPC.  - &#x60;MPN&#x60; - restricts the search filtering to MPNs (Manufacturer Part Number). (optional)
     * @param  string $language Language indicates the language for searching products. Allows to specify the language of the given phrase. At present we support: \&quot;pl-PL\&quot; and \&quot;cs-CZ\&quot;. (optional)
     * @param  string $category_id The category identifier to filter results. This can only be used when searching by phrase. (optional)
     * @param  array<string,string> $dynamic_filters You can filter and customize your search results to find exactly what you need by applying filters ids and their dictionary values to query according to the flowing pattern: id&#x3D;value. When the filter definition looks like:   &#x60;&#x60;&#x60;&#x60;   {     \&quot;id\&quot;: \&quot;127448\&quot;,     \&quot;name\&quot;: \&quot;Kolor\&quot;,     \&quot;type\&quot;: \&quot;SINGLE\&quot;,     \&quot;values\&quot;: [       {         \&quot;name\&quot;: \&quot;biały\&quot;,         \&quot;value\&quot;: \&quot;2\&quot;       },       {         \&quot;name\&quot;: \&quot;czarny\&quot;,         \&quot;value\&quot;: \&quot;1\&quot; }     ]   }   &#x60;&#x60;&#x60;&#x60; You can use &#39;Kolor&#39; filter to query results, i.e.:   * &#x60;127448&#x3D;2&#x60; for \&quot;biały\&quot;   * &#x60;127448&#x3D;1&#x60; for \&quot;czarny\&quot;. (optional)
     * @param  string $page_id A \&quot;cursor\&quot; to the next set of results. (optional)
     * @param  string $search_features Enables additional search options: - *SIMILAR_CATEGORIES* - searching in the indicated category (category.id) and in &#39;similar categories&#39; (works only if category.id is a leaf category). (optional)
     * @param  bool $include_drafts Include products in draft state. (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function getSaleProductsRequest($ean = null, $phrase = null, $mode = null, $language = null, $category_id = null, $dynamic_filters = null, $page_id = null, $search_features = null, $include_drafts = null)
    {
        if ($ean !== null && strlen($ean) > 18) {
            throw new \InvalidArgumentException('invalid length for "$ean" when calling ProductsApi.getSaleProducts, must be smaller than or equal to 18.');
        }

        if ($phrase !== null && strlen($phrase) > 1024) {
            throw new \InvalidArgumentException('invalid length for "$phrase" when calling ProductsApi.getSaleProducts, must be smaller than or equal to 1024.');
        }

        $resourcePath = '/sale/products';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // query params
        if ($ean !== null) {
            if('form' === 'form' && is_array($ean)) {
                foreach($ean as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['ean'] = $ean;
            }
        }
        // query params
        if ($phrase !== null) {
            if('form' === 'form' && is_array($phrase)) {
                foreach($phrase as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['phrase'] = $phrase;
            }
        }
        // query params
        if ($mode !== null) {
            if('form' === 'form' && is_array($mode)) {
                foreach($mode as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['mode'] = $mode;
            }
        }
        // query params
        if ($language !== null) {
            if('form' === 'form' && is_array($language)) {
                foreach($language as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['language'] = $language;
            }
        }
        // query params
        if ($category_id !== null) {
            if('form' === 'form' && is_array($category_id)) {
                foreach($category_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['category.id'] = $category_id;
            }
        }
        // query params
        if ($dynamic_filters !== null) {
            if('form' === 'form' && is_array($dynamic_filters)) {
                foreach($dynamic_filters as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['Dynamic filters'] = $dynamic_filters;
            }
        }
        // query params
        if ($page_id !== null) {
            if('form' === 'form' && is_array($page_id)) {
                foreach($page_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['page.id'] = $page_id;
            }
        }
        // query params
        if ($search_features !== null) {
            if('form' === 'form' && is_array($search_features)) {
                foreach($search_features as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['searchFeatures'] = $search_features;
            }
        }
        // query params
        if ($include_drafts !== null) {
            if('form' === 'form' && is_array($include_drafts)) {
                foreach($include_drafts as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['includeDrafts'] = $include_drafts;
            }
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.allegro.public.v1+json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('GET', $uri, $headers, $httpBody);
    }

    /**
     * Operation productChangeProposal
     *
     * Propose changes in product
     *
     * @param  string $product_id The product identifier. (required)
     * @param  \AllegroApi\Model\ProductChangeProposalRequest $product_change_proposal_request product_change_proposal_request (required)
     * @param  string $accept_language Expected language of messages. (optional, default to 'en-US')
     *
     *@throws \InvalidArgumentException
     * @throws \AllegroApi\Exception\ApiException on non-2xx response
     * @return \AllegroApi\Model\ProductChangeProposalDto|\AllegroApi\Model\ErrorsHolder|\AllegroApi\Model\AuthError|\AllegroApi\Model\ErrorsHolder|\AllegroApi\Model\ErrorsHolder
     */
    public function productChangeProposal($product_id, $product_change_proposal_request, $accept_language = 'en-US')
    {
        [$response] = $this->productChangeProposalWithHttpInfo($product_id, $product_change_proposal_request, $accept_language);
        return $response;
    }

    /**
     * Operation productChangeProposalWithHttpInfo
     *
     * Propose changes in product
     *
     * @param  string $product_id The product identifier. (required)
     * @param  \AllegroApi\Model\ProductChangeProposalRequest $product_change_proposal_request (required)
     * @param  string $accept_language Expected language of messages. (optional, default to 'en-US')
     *
     *@throws \InvalidArgumentException
     * @throws \AllegroApi\Exception\ApiException on non-2xx response
     * @return array of \AllegroApi\Model\ProductChangeProposalDto|\AllegroApi\Model\ErrorsHolder|\AllegroApi\Model\AuthError|\AllegroApi\Model\ErrorsHolder|\AllegroApi\Model\ErrorsHolder, HTTP status code, HTTP response headers (array of strings)
     */
    public function productChangeProposalWithHttpInfo($product_id, $product_change_proposal_request, $accept_language = 'en-US')
    {
        $request = $this->productChangeProposalRequest($product_id, $product_change_proposal_request, $accept_language);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 201:
                    if ('\AllegroApi\Model\ProductChangeProposalDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AllegroApi\Model\ProductChangeProposalDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\AllegroApi\Model\ErrorsHolder' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AllegroApi\Model\ErrorsHolder', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\AllegroApi\Model\AuthError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AllegroApi\Model\AuthError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\AllegroApi\Model\ErrorsHolder' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AllegroApi\Model\ErrorsHolder', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\AllegroApi\Model\ErrorsHolder' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AllegroApi\Model\ErrorsHolder', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\AllegroApi\Model\ProductChangeProposalDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AllegroApi\Model\ProductChangeProposalDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AllegroApi\Model\ErrorsHolder',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AllegroApi\Model\AuthError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AllegroApi\Model\ErrorsHolder',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AllegroApi\Model\ErrorsHolder',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation productChangeProposalAsync
     *
     * Propose changes in product
     *
     * @param  string $product_id The product identifier. (required)
     * @param  \AllegroApi\Model\ProductChangeProposalRequest $product_change_proposal_request (required)
     * @param  string $accept_language Expected language of messages. (optional, default to 'en-US')
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function productChangeProposalAsync($product_id, $product_change_proposal_request, $accept_language = 'en-US')
    {
        return $this->productChangeProposalAsyncWithHttpInfo($product_id, $product_change_proposal_request, $accept_language)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productChangeProposalAsyncWithHttpInfo
     *
     * Propose changes in product
     *
     * @param  string $product_id The product identifier. (required)
     * @param  \AllegroApi\Model\ProductChangeProposalRequest $product_change_proposal_request (required)
     * @param  string $accept_language Expected language of messages. (optional, default to 'en-US')
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function productChangeProposalAsyncWithHttpInfo($product_id, $product_change_proposal_request, $accept_language = 'en-US')
    {
        $returnType = '\AllegroApi\Model\ProductChangeProposalDto';
        $request = $this->productChangeProposalRequest($product_id, $product_change_proposal_request, $accept_language);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'productChangeProposal'
     *
     * @param  string $product_id The product identifier. (required)
     * @param  \AllegroApi\Model\ProductChangeProposalRequest $product_change_proposal_request (required)
     * @param  string $accept_language Expected language of messages. (optional, default to 'en-US')
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function productChangeProposalRequest($product_id, $product_change_proposal_request, $accept_language = 'en-US')
    {
        // verify the required parameter 'product_id' is set
        if ($product_id === null || (is_array($product_id) && count($product_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product_id when calling productChangeProposal'
            );
        }
        // verify the required parameter 'product_change_proposal_request' is set
        if ($product_change_proposal_request === null || (is_array($product_change_proposal_request) && count($product_change_proposal_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product_change_proposal_request when calling productChangeProposal'
            );
        }

        $resourcePath = '/sale/products/{productId}/change-proposals';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = ObjectSerializer::toHeaderValue($accept_language);
        }

        // path params
        if ($product_id !== null) {
            $resourcePath = str_replace(
                '{' . 'productId' . '}',
                ObjectSerializer::toPathValue($product_id),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.allegro.public.v1+json'],
            'application/vnd.allegro.public.v1+json',
            $multipart
        );

        // for model (json/xml)
        if (isset($product_change_proposal_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($product_change_proposal_request));
            } else {
                $httpBody = $product_change_proposal_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('POST', $uri, $headers, $httpBody);
    }

    /**
     * Operation proposeSaleProduct
     *
     * Propose a product
     *
     * @param  \AllegroApi\Model\ProductProposalsRequest $product_proposals_request product_proposals_request (required)
     *
     *@throws \InvalidArgumentException
     * @throws \AllegroApi\Exception\ApiException on non-2xx response
     * @return \AllegroApi\Model\ProductProposalsResponse|\AllegroApi\Model\ErrorsHolder|\AllegroApi\Model\AuthError|\AllegroApi\Model\ErrorsHolder|\AllegroApi\Model\ErrorsHolder|\AllegroApi\Model\ErrorsHolder
     */
    public function proposeSaleProduct($product_proposals_request)
    {
        [$response] = $this->proposeSaleProductWithHttpInfo($product_proposals_request);
        return $response;
    }

    /**
     * Operation proposeSaleProductWithHttpInfo
     *
     * Propose a product
     *
     * @param  \AllegroApi\Model\ProductProposalsRequest $product_proposals_request (required)
     *
     *@throws \InvalidArgumentException
     * @throws \AllegroApi\Exception\ApiException on non-2xx response
     * @return array of \AllegroApi\Model\ProductProposalsResponse|\AllegroApi\Model\ErrorsHolder|\AllegroApi\Model\AuthError|\AllegroApi\Model\ErrorsHolder|\AllegroApi\Model\ErrorsHolder|\AllegroApi\Model\ErrorsHolder, HTTP status code, HTTP response headers (array of strings)
     */
    public function proposeSaleProductWithHttpInfo($product_proposals_request)
    {
        $request = $this->proposeSaleProductRequest($product_proposals_request);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 201:
                    if ('\AllegroApi\Model\ProductProposalsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AllegroApi\Model\ProductProposalsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\AllegroApi\Model\ErrorsHolder' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AllegroApi\Model\ErrorsHolder', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\AllegroApi\Model\AuthError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AllegroApi\Model\AuthError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\AllegroApi\Model\ErrorsHolder' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AllegroApi\Model\ErrorsHolder', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\AllegroApi\Model\ErrorsHolder' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AllegroApi\Model\ErrorsHolder', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\AllegroApi\Model\ErrorsHolder' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AllegroApi\Model\ErrorsHolder', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\AllegroApi\Model\ProductProposalsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AllegroApi\Model\ProductProposalsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AllegroApi\Model\ErrorsHolder',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AllegroApi\Model\AuthError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AllegroApi\Model\ErrorsHolder',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AllegroApi\Model\ErrorsHolder',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AllegroApi\Model\ErrorsHolder',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation proposeSaleProductAsync
     *
     * Propose a product
     *
     * @param  \AllegroApi\Model\ProductProposalsRequest $product_proposals_request (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function proposeSaleProductAsync($product_proposals_request)
    {
        return $this->proposeSaleProductAsyncWithHttpInfo($product_proposals_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation proposeSaleProductAsyncWithHttpInfo
     *
     * Propose a product
     *
     * @param  \AllegroApi\Model\ProductProposalsRequest $product_proposals_request (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function proposeSaleProductAsyncWithHttpInfo($product_proposals_request)
    {
        $returnType = '\AllegroApi\Model\ProductProposalsResponse';
        $request = $this->proposeSaleProductRequest($product_proposals_request);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'proposeSaleProduct'
     *
     * @param  \AllegroApi\Model\ProductProposalsRequest $product_proposals_request (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function proposeSaleProductRequest($product_proposals_request)
    {
        // verify the required parameter 'product_proposals_request' is set
        if ($product_proposals_request === null || (is_array($product_proposals_request) && count($product_proposals_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product_proposals_request when calling proposeSaleProduct'
            );
        }

        $resourcePath = '/sale/product-proposals';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.allegro.public.v1+json'],
            'application/vnd.allegro.public.v1+json',
            $multipart
        );

        // for model (json/xml)
        if (isset($product_proposals_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($product_proposals_request));
            } else {
                $httpBody = $product_proposals_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('POST', $uri, $headers, $httpBody);
    }

    /**
     * @param string $method
     * @param string|UriInterface $uri
     * @param array $headers
     * @param string|StreamInterface|null $body
     *
     * @return RequestInterface
     */
    protected function createRequest(string $method, $uri, array $headers = [], $body = null): RequestInterface
    {
        if ($this->requestFactory instanceof RequestFactory) {
            return $this->requestFactory->createRequest(
                $method,
                $uri,
                $headers,
                $body
            );
        }

        if (is_string($body) && '' !== $body && null === $this->streamFactory) {
            throw new \RuntimeException('Cannot create request: A stream factory is required to create a request with a non-empty string body.');
        }

        $request = $this->requestFactory->createRequest($method, $uri);

        foreach ($headers as $key => $value) {
            $request = $request->withHeader($key, $value);
        }

        if (null !== $body && '' !== $body) {
            $request = $request->withBody(
                is_string($body) ? $this->streamFactory->createStream($body) : $body
            );
        }

        return $request;
    }

    private function createUri(
        string $operationHost,
        string $resourcePath,
        array $queryParams
    ): UriInterface {
        $parsedUrl = parse_url($operationHost);

        $host = $parsedUrl['host'] ?? null;
        $scheme = $parsedUrl['scheme'] ?? null;
        $basePath = $parsedUrl['path'] ?? null;
        $port = $parsedUrl['port'] ?? null;
        $user = $parsedUrl['user'] ?? null;
        $password = $parsedUrl['pass'] ?? null;

        $uri = $this->uriFactory->createUri($basePath . $resourcePath)
            ->withHost($host)
            ->withScheme($scheme)
            ->withPort($port)
            ->withQuery(ObjectSerializer::buildQuery($queryParams));

        if ($user) {
            $uri = $uri->withUserInfo($user, $password);
        }

        return $uri;
    }
}
